"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

directive @extends on OBJECT | INTERFACE

directive @external on FIELD_DEFINITION

directive @key(fields: _FieldSet!) on OBJECT | INTERFACE

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

type AccountError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: AccountErrorCode!
}

"""An enumeration."""
enum AccountErrorCode {
  ACTIVATE_OWN_ACCOUNT
  ACTIVATE_SUPERUSER_ACCOUNT
  ASSIGN_NON_STAFF_MEMBER
  DEACTIVATE_OWN_ACCOUNT
  DEACTIVATE_SUPERUSER_ACCOUNT
  DELETE_NON_STAFF_USER
  DELETE_NON_COLLABORATOR_USER
  REMOVE_USER_CAN_MERGE_ORDERS
  DELETE_OWN_ACCOUNT
  DELETE_STAFF_ACCOUNT
  DELETE_SUPERUSER_ACCOUNT
  GRAPHQL_ERROR
  INVALID
  INVALID_PASSWORD
  INVALID_CODE
  INVALID_EMAIL
  INVALID_PHONE
  NOT_FOUND
  NOT_ACTIVE
  PASSWORD_WRONG
  PASSWORD_ENTIRELY_NUMERIC
  PASSWORD_TOO_COMMON
  PASSWORD_TOO_SHORT
  PASSWORD_TOO_SIMILAR
  REQUIRED
  UNIQUE
  NOT_SUPERUSER
  NOT_STAFF
  NOT_CUSTOMER
  IS_USING
  NETWORK_ERROR
  NOT_EXIST_FACEBOOK_APP
  ALREADY_EXIST
  CODE_EXPIRED
  NO_PASSWORD
  SMS_ERROR
  TOO_FREQUENT
}

enum AccountType {
  STAFF
  CUSTOMER
}

input AddressInput {
  """Given address id."""
  id: ID

  """Given name."""
  name: String

  """Company or organization."""
  companyName: String

  """Address."""
  streetAddress1: String

  """Address."""
  streetAddress2: String

  """City."""
  city: String

  """District."""
  district: String

  """Ward."""
  ward: String

  """District."""
  cityArea: String

  """Postal code."""
  postalCode: String

  """Country."""
  country: CountryCode

  """State or province."""
  countryArea: String

  """Phone number."""
  phone: String
}

enum AttachmentType {
  IMAGE
  VIDEO
}

"""Creates a banner."""
type BannerCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  banner: BannerType
}

input BannerCreateInput {
  name: String!
  isDefault: String
}

"""Delete default for banner."""
type BannerDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  banner: BannerType
}

input BannerFilterInput {
  """"""
  name: String

  """"""
  isDefault: Boolean
}

"""Creates a banner image."""
type BannerImageCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  bannerImage: BannerImageType
}

input BannerImageCreateInput {
  banner: ID!
  category: ID!

  """Background image file."""
  bannerImage: Upload

  """Alt text for an image."""
  alt: String
}

"""Delete default for banner image."""
type BannerImageDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  bannerImage: BannerImageType
}

input BannerImageFilterInput {
  banner: ID
}

type BannerImageType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  banner: BannerType!

  """"""
  category: Category!

  """"""
  categoryUrl: String!

  """"""
  bannerImage: String!

  """"""
  ppoi: String!

  """"""
  alt: String!

  """"""
  active: Boolean!
}

type BannerImageTypeCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [BannerImageTypeCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type BannerImageTypeCountableEdge {
  """The item at the end of the edge."""
  node: BannerImageType!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Update banner image."""
type BannerImageUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  bannerImage: BannerImageType
}

input BannerImageUpdateInput {
  """Update banner for banner image."""
  banner: ID

  """Update category for banner image."""
  category: ID

  """Update alt text for banner image."""
  alt: String

  """Update status for banner image."""
  active: Boolean
}

type BannerType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  name: String!

  """"""
  isDefault: Boolean!
  bannerImages: [BannerImageType]
}

type BannerTypeCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [BannerTypeCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type BannerTypeCountableEdge {
  """The item at the end of the edge."""
  node: BannerType!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Update default for banner."""
type BannerUpdateDefault {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  banner: BannerType
}

type BulkProductError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ProductErrorCode!

  """Index of an input list item that caused the error."""
  index: Int
}

"""
Represents a single category of products. Categories allow to organize products in a tree-hierarchies which can be used for navigation in the storefront.
"""
type Category implements Node & ObjectWithMetadata {
  """"""
  seoTitle: String

  """"""
  seoDescription: String

  """The ID of the object."""
  id: ID!

  """"""
  name: String!

  """"""
  description: String!

  """"""
  slug: String!

  """"""
  parent: Category

  """"""
  level: Int!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of products in the category."""
  products(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
    isDirect: Boolean
    filter: ProductFilterInput
  ): ProductCountableConnection

  """List of children of the category."""
  children(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CategoryCountableConnection
  backgroundImage(
    """Size of the image."""
    size: Int
  ): Image
}

"""Deletes categories."""
type CategoryBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]!
}

type CategoryCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CategoryCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CategoryCountableEdge {
  """The item at the end of the edge."""
  node: Category!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new category."""
type CategoryCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  category: Category
}

"""Deletes a category."""
type CategoryDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  category: Category
}

input CategoryFilterInput {
  search: String
  ids: [ID]
  level: Int
}

input CategoryInput {
  """Category description (HTML/text)."""
  description: String

  """Category name."""
  name: String

  """Category slug."""
  slug: String

  """Search engine optimization fields."""
  seo: SeoInput

  """Background image file."""
  backgroundImage: Upload

  """Alt text for an image."""
  backgroundImageAlt: String
}

enum CategorySortField {
  """Sort categories by name."""
  NAME

  """Sort categories by product count."""
  PRODUCT_COUNT

  """Sort categories by subcategory count."""
  SUBCATEGORY_COUNT
}

input CategorySortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort categories by the selected field."""
  field: CategorySortField!
}

"""Updates a category."""
type CategoryUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  category: Category
}

type ChannelStats {
  channel: String!
  totalAmount: Int!
  totalOrderQuantity: Int!
}

"""Conversations """
type ChatConversation implements Node {
  """The ID of the object."""
  id: ID!

  """Time of conversation creation"""
  createdAt: DateTime
  facebookPage: FacebookPage!
  customerPSID: String!

  """Do conversation have new message"""
  hasNewMessage: Boolean
  latestMessageText: String

  """Latest message text"""
  latestMessage: ChatMessage
  updatedAt: DateTime
  tags: [Tag]
  staff: Staff
  customerName: String
  customerImage: String
  customer: Customer
}

type ChatConversationCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ChatConversationCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ChatConversationCountableEdge {
  """The item at the end of the edge."""
  node: ChatConversation!

  """A cursor for use in pagination."""
  cursor: String!
}

input ChatConversationFilterInput {
  search: String
  messageContent: String
  page: ID
  staff: ID
  tag: String
  updatedTime: DateRangeInput
  hasNewMessage: Boolean
}

enum ChatConversationSortField {
  ID
  UPDATED
  CREATED
}

input ChatConversationSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort customers by the selected field."""
  field: ChatConversationSortField!
}

"""Add tag for a conversation."""
type ChatConversationTagAdd {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  conversation: ChatConversation
  chatErrors: [ChatError!]!
}

"""Remove tag for a conversation."""
type ChatConversationTagDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  conversation: ChatConversation
  chatErrors: [ChatError!]!
}

type ChatError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ChatErrorCode!
}

"""An enumeration."""
enum ChatErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  NETWORK_ERROR
}

type ChatMessage implements Node {
  id: ID!
  messageFacebookId: String
  createdAt: DateTime!
  sender: String!
  recipient: String!
  isUserRef: Boolean!
  staff: Staff
  isMyMessage: Boolean!
  type: ChatMessagingType!
  adId: String
  content: String!
  messageText: String
  attachments: [MessageAttachment]
  chatConversation: ChatConversation
}

input ChatMessageAttachmentInput {
  filePath: String
  file: Upload
  type: String
}

type ChatMessageCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ChatMessageCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ChatMessageCountableEdge {
  """The item at the end of the edge."""
  node: ChatMessage!

  """A cursor for use in pagination."""
  cursor: String!
}

input ChatMessageFilterInput {
  search: String
  conversation: ID
  type: [ChatMessagingType]
}

input ChatMessageInput {
  text: String
  attachments: ChatMessageAttachmentInput
}

enum ChatMessageSortField {
  ID
  CREATED
}

input ChatMessageSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort customers by the selected field."""
  field: ChatMessageSortField!
}

enum ChatMessagingType {
  ACCOUNT_LINKING
  DELIVERY
  FEEDBACK
  OPTIN
  POLICY_ENFORCEMENT
  POSTBACK
  REACTION
  READ
  TEXT
  FILE_ATTACHMENT
  OPEN_THREAD
  TEMPLATE
}

"""Checkout object."""
type Checkout implements Node {
  """"""
  created: DateTime!

  """"""
  lastChange: DateTime!

  """"""
  customer: Customer

  """"""
  quantity: Int!

  """"""
  shippingAddress: CheckoutAddress

  """"""
  note: String
  discount: Money
  voucher: Voucher

  """The ID of the object."""
  id: ID!

  """Email of a customer."""
  email: String!

  """
  A list of checkout lines, each containing information about an item in the checkout.
  """
  lines: [CheckoutLine]

  """The price of the shipping, with all the taxes included."""
  shippingPrice: TaxedMoney

  """The price of the checkout before shipping, with taxes included."""
  subtotalPrice: TaxedMoney

  """
  The sum of the the checkout line prices, with all the taxes,shipping costs, and discounts included.
  """
  totalPrice: TaxedMoney
  creator: User!
}

"""Represents user address data."""
type CheckoutAddress implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  name: String!

  """"""
  companyName: String!

  """"""
  streetAddress1: String!

  """"""
  streetAddress2: String!

  """"""
  city: String!

  """"""
  district: String!

  """"""
  ward: String!

  """"""
  cityArea: String!

  """"""
  postalCode: String!

  """Shop's default country."""
  country: CountryDisplay!

  """"""
  countryArea: String!
  phone: String

  """Address is user's default shipping address."""
  isDefaultShippingAddress: Boolean
}

type CheckoutApplyVoucher {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  checkoutErrors: [CheckoutError!]!
  checkout: Checkout
}

"""
Completes the checkout. As a result a new order is created and a payment charge is made. This action requires a successful payment before it can be performed. In case additional confirmation step as 3D secure is required confirmationNeeded flag will be set to True and no order created until payment is confirmed with second call of this mutation.
"""
type CheckoutComplete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Placed order."""
  order: Order
  checkoutErrors: [CheckoutError!]!
}

type CheckoutCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CheckoutCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CheckoutCountableEdge {
  """The item at the end of the edge."""
  node: Checkout!

  """A cursor for use in pagination."""
  cursor: String!
}

type CheckoutCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  checkoutErrors: [CheckoutError!]!
  checkout: Checkout
}

input CheckoutCreateInput {
  """
  A list of checkout lines, each containing information about an item in the checkout.
  """
  lines: [CheckoutLineInput]!
  customer: ID!
}

type CheckoutDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  checkoutErrors: [CheckoutError!]!
  checkout: Checkout
}

"""Updates email address in the existing checkout object."""
type CheckoutEmailUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: CheckoutErrorCode!
}

"""An enumeration."""
enum CheckoutErrorCode {
  GRAPHQL_ERROR
  INSUFFICIENT_STOCK
  INVALID
  USER_INVALID
  USER_EXISTED
  NOT_FOUND
  QUANTITY_GREATER_THAN_LIMIT
  REQUIRED
  SHIPPING_ADDRESS_NOT_SET
  SHIPPING_METHOD_NOT_APPLICABLE
  SHIPPING_METHOD_NOT_SET
  SHIPPING_NOT_REQUIRED
  TAX_ERROR
  UNIQUE
  VOUCHER_NOT_APPLICABLE
  ZERO_QUANTITY
  VOUCHER_INVALID
}

"""Represents an item in the checkout."""
type CheckoutLine implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  variant: ProductVariant!

  """"""
  quantity: Int!

  """The sum of the checkout line price, taxes and discounts."""
  totalPrice: TaxedMoney
}

type CheckoutLineCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CheckoutLineCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CheckoutLineCountableEdge {
  """The item at the end of the edge."""
  node: CheckoutLine!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Deletes a CheckoutLine."""
type CheckoutLineDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

input CheckoutLineInput {
  """The number of items purchased."""
  quantity: Int!

  """ID of the product variant."""
  variantId: ID!
}

"""Adds a checkout line to the existing checkout."""
type CheckoutLinesAdd {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""Updates checkout line in the existing checkout."""
type CheckoutLinesUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""Update shipping address in the existing checkout."""
type CheckoutShippingAddressUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """An updated checkout."""
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""Represents a collection of products."""
type Collection implements Node & ObjectWithMetadata {
  """"""
  seoTitle: String

  """"""
  seoDescription: String

  """The ID of the object."""
  id: ID!

  """"""
  name: String!

  """"""
  description: String!

  """"""
  descriptionJson: JSONString!

  """"""
  publicationDate: Date

  """"""
  isPublished: Boolean!

  """"""
  slug: String!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of products in this collection."""
  products(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductCountableConnection
  backgroundImage(
    """Size of the image."""
    size: Int
  ): Image
  homeCollection: [HomeCollection]
  homeSlide: [HomeSlide]
}

"""Adds products to a collection."""
type CollectionAddProducts {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Collection to which products will be added."""
  collection: Collection
  productErrors: [ProductError!]!
}

"""Deletes collections."""
type CollectionBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]!
}

"""Publish collections."""
type CollectionBulkPublish {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]!
}

type CollectionCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CollectionCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CollectionCountableEdge {
  """The item at the end of the edge."""
  node: Collection!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new collection."""
type CollectionCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  collection: Collection
}

"""Deletes a collection."""
type CollectionDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  collection: Collection
}

input CollectionFilterInput {
  published: CollectionPublished

  """"""
  search: String
  ids: [ID]
}

input CollectionInput {
  """Informs whether a collection is published."""
  isPublished: Boolean!

  """Name of the collection."""
  name: String!

  """Slug of the collection."""
  slug: String!

  """Description of the collection (HTML/text)."""
  description: String

  """Description of the collection (JSON)."""
  descriptionJson: JSONString

  """Background image file."""
  backgroundImage: Upload

  """Alt text for an image."""
  backgroundImageAlt: String

  """Search engine optimization fields."""
  seo: SeoInput
  products: [ID!]
}

enum CollectionPublished {
  PUBLISHED
  HIDDEN
}

"""Remove products from a collection."""
type CollectionRemoveProducts {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Collection from which products will be removed."""
  collection: Collection
  productErrors: [ProductError!]!
}

"""Reorder the products of a collection."""
type CollectionReorderProducts {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Collection from which products are reordered."""
  collection: Collection
  productErrors: [ProductError!]!
}

enum CollectionSortField {
  """Sort collections by name."""
  NAME

  """Sort collections by availability."""
  AVAILABILITY

  """Sort collections by product count."""
  PRODUCT_COUNT
}

input CollectionSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort collections by the selected field."""
  field: CollectionSortField!
}

"""Updates a collection."""
type CollectionUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  collection: Collection
}

"""Confirm user account by token sent by email during registration"""
type ConfirmCustomer {
  errors: [Error]!

  """A user instance with new password."""
  customer: Customer

  """List of errors that occurred executing the mutation."""
  customerErrors: [CustomerError!]
}

"""Update conversation staff."""
type ConversationStaffUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  conversation: ChatConversation
  chatErrors: [ChatError!]!
}

"""Update conversation status."""
type ConversationStatusUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  conversation: ChatConversation
  chatErrors: [ChatError!]!
}

"""An enumeration."""
enum CountryCode {
  AF
  AX
  AL
  DZ
  AS
  AD
  AO
  AI
  AQ
  AG
  AR
  AM
  AW
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BQ
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  CV
  KH
  CM
  CA
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  CI
  HR
  CU
  CW
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  SZ
  ET
  EU
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GU
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MG
  MW
  MY
  MV
  ML
  MT
  MH
  MQ
  MR
  MU
  YT
  MX
  FM
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  KP
  MK
  MP
  NO
  OM
  PK
  PW
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  PR
  QA
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  LC
  MF
  PM
  VC
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  KR
  SS
  ES
  LK
  SD
  SR
  SJ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  UM
  US
  UY
  UZ
  VU
  VE
  VN
  VG
  VI
  WF
  EH
  YE
  ZM
  ZW
}

type CountryDisplay {
  """Country code."""
  code: String!

  """Country name."""
  country: String!

  """Country tax."""
  vat: VAT
}

"""
Mutation that authenticates a user and returns token and user data.

It overrides the default graphql_jwt.ObtainJSONWebToken to wrap potential
authentication errors in our Error type, which is consistent to how the rest of
the mutation works.
"""
type CreateTokenStaff {
  token: String
  errors: [Error]!
  staffErrors: [StaffError!]!
  staff: Staff
}

"""Represents customer data."""
type Customer implements Node & ObjectWithMetadata {
  """The ID of the object."""
  id: ID!

  """"""
  name: String!
  type: AccountType
  imageUrl: Image

  """"""
  isActive: Boolean!
  emailConfirm: Boolean

  """"""
  dateJoined: DateTime!

  """"""
  dateModified: DateTime!

  """User point"""
  rewardPoint: Int

  """List of all customer's addresses."""
  addresses: [CustomerAddress]

  """List of all customer's default addresses."""
  defaultAddress: CustomerAddress

  """List of all customer's social details."""
  socialDetails: [SocialDetail]

  """A note about the customer."""
  note: String
  warning: String

  """List of customer's orders."""
  orders(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): OrderCountableConnection

  """Phone number."""
  phone: String
  email: String
  addressPhone: String
  checkouts: [Checkout]

  """User's wishlist."""
  wishlist(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): WishlistItemCountableConnection
  reviews(
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductReviewCountableConnection

  """Amount of money."""
  totalAmount: Int
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!
  permissions: [PermissionDisplay]
  groups: [Group]
}

"""Represents user address data."""
type CustomerAddress implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  name: String!

  """"""
  streetAddress1: String!

  """"""
  streetAddress2: String

  """"""
  city: String

  """"""
  district: String

  """"""
  ward: String

  """"""
  postalCode: String

  """"""
  phone: String!

  """Shop's default country."""
  country: CountryDisplay!

  """"""
  isDefault: Boolean!
}

"""Creates user address."""
type CustomerAddressCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """A customer instance for which the address was created."""
  customer: Customer
  customerErrors: [CustomerError!]!
  address: CustomerAddress
}

"""Deletes an address."""
type CustomerAddressDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """A customer instance for which the address was deleted."""
  customer: Customer
  customerErrors: [CustomerError!]!
}

input CustomerAddressInput {
  """Real name."""
  name: String!
  streetAddress1: String!
  streetAddress2: String
  city: String!
  district: String!
  ward: String
  postalCode: String
  phone: String!
  isDefault: Boolean
}

"""Sets a default address for the given user."""
type CustomerAddressSetDefault {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """An updated customer instance."""
  customer: Customer
  customerErrors: [CustomerError!]!
}

"""Updates an address."""
type CustomerAddressUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """A user object for which the address was edited."""
  customer: Customer
  customerErrors: [CustomerError!]!
  address: CustomerAddress
}

type CustomerAvatarDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """An updated user instance."""
  customer: Customer
  customerErrors: [CustomerError!]!
}

type CustomerAvatarUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """An updated user instance."""
  customer: Customer
  customerErrors: [CustomerError!]!
}

"""Deletes customers."""
type CustomerBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Returns how many objects were affected."""
  count: Int!
  customerErrors: [CustomerError!]!
}

"""Set customer active."""
type CustomerBulkSetActive {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Returns how many objects were affected."""
  count: Int!
  customerErrors: [CustomerError!]!
}

type CustomerCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [CustomerCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type CustomerCountableEdge {
  """The item at the end of the edge."""
  node: Customer!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new customer."""
type CustomerCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  customerErrors: [CustomerError!]!
  customer: Customer
}

"""Deletes a customer."""
type CustomerDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  customerErrors: [CustomerError!]!
  customer: Customer
}

type CustomerEmailChange {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """A user instance with a new password."""
  customer: Customer
  customerErrors: [CustomerError!]
}

input CustomerEmailRegisterInput {
  """The email address of the user."""
  email: String!
  name: String!

  """Password."""
  password: String!

  """Base of frontend URL that will be needed to create confirmation URL."""
  redirectUrl: String
}

type CustomerError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: AccountErrorCode!
}

"""History log of the customer."""
type CustomerEvent implements Node {
  """The ID of the object."""
  id: ID!

  """Date when event happened at in ISO 8601 format."""
  date: DateTime

  """Customer event type."""
  type: CustomerEventsEnum

  """User who performed the action."""
  user: User

  """Content of the event."""
  message: String

  """Number of objects concerned by the event."""
  count: Int

  """The concerned order."""
  order: Order

  """The concerned order line."""
  orderLine: OrderLine
}

"""An enumeration."""
enum CustomerEventsEnum {
  ACCOUNT_CREATED
  PASSWORD_RESET_LINK_SENT
  PASSWORD_RESET
  EMAIL_CHANGED_REQUEST
  PASSWORD_CHANGED
  EMAIL_CHANGED
  PLACED_ORDER
  NOTE_ADDED_TO_ORDER
  DIGITAL_LINK_DOWNLOADED
  CUSTOMER_DELETED
  NAME_ASSIGNED
  EMAIL_ASSIGNED
  NOTE_ADDED
}

input CustomerFilterInput {
  dateJoined: DateRangeInput
  moneySpent: PriceRangeInput
  numberOfOrders: IntRangeInput
  placedOrders: DateRangeInput

  """"""
  search: String
}

input CustomerInput {
  """Real name."""
  userName: String!

  """active status"""
  isActive: Boolean!

  """customer note."""
  note: String
  dateJoined: DateTime!
  dateModified: DateTime

  """Default address of the customer."""
  defaultAddress: CustomerAddressInput
  socialId: String
  socialAppId: String
}

type CustomerLogin {
  token: String
  errors: [Error!]!
  customerErrors: [CustomerError!]!
  customer: Customer
}

type CustomerPasswordChange {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """A user instance with a new password."""
  customer: Customer
  customerErrors: [CustomerError!]
}

type CustomerPhoneChange {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """A user instance with a new password."""
  customer: Customer
  customerErrors: [CustomerError!]
}

input CustomerPhoneRegisterInput {
  """The email address of the user."""
  phone: String!
  code: String!

  """Password."""
  password: String
}

"""Register a new user."""
type CustomerRegister {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  customerErrors: [CustomerError!]!
  customer: Customer
  token: String
}

enum CustomerSortField {
  NAME
  REWARD_POINT
  ORDER_COUNT
}

input CustomerSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort customers by the selected field."""
  field: CustomerSortField!
}

"""Updates an existing customer."""
type CustomerUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  customerErrors: [CustomerError!]!
  customer: Customer
}

type Dashboard {
  totalAmount: Int!
  totalOrderQuantity: Int!
  stats: [ChannelStats]
  unfulfilledOrderQuantity: Int!
  totalPaymentToCapture: Int!
  productOutOfStock: Int!
  topProducts: [TopVariant]
}

"""An RFC-3339 compliant Full Date Scalar"""
scalar Date

input DateRangeInput {
  """Start date."""
  gte: Date

  """End date."""
  lte: Date
}

"""An RFC-3339 compliant DateTime Scalar"""
scalar DateTime

input DateTimeRangeInput {
  """Start date."""
  gte: DateTime

  """End date."""
  lte: DateTime
}

"""An float scalar"""
scalar Decimal

"""Represents default message."""
type DefaultMessage implements Node {
  """The ID of the object."""
  id: ID!

  """Title of message."""
  title: String!

  """Content of message."""
  content: String!
  images: [Image]
}

type DefaultMessageCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [DefaultMessageCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type DefaultMessageCountableEdge {
  """The item at the end of the edge."""
  node: DefaultMessage!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates new default message."""
type DefaultMessageCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  chatErrors: [ChatError!]!
  defaultMessage: DefaultMessage
}

"""Deletes selected message."""
type DefaultMessageDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  chatErrors: [ChatError!]!
  defaultMessage: DefaultMessage
}

input DefaultMessageFilterInput {
  """"""
  search: String
}

type DefaultMessageImageDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  chatErrors: [ChatError!]!
  defaultMessage: DefaultMessage
}

input DefaultMessageInput {
  """Title of message."""
  title: String!

  """Content of message."""
  content: String!
  images: [ImageInput]
}

"""Updates given message."""
type DefaultMessageUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  chatErrors: [ChatError!]!
  defaultMessage: DefaultMessage
}

"""Delete metadata of an object."""
type DeleteMetadata {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  metadataErrors: [MetadataError!]!
  item: MetadataItem
}

"""Delete object's private metadata."""
type DeletePrivateMetadata {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  metadataErrors: [MetadataError!]!
  item: MetadataItem
}

type DiscountError {
  field: String
  message: String
  code: DiscountErrorCode
}

enum DiscountErrorCode {
  GRAPHQL_ERROR
  INVALID
  INVALID_DISCOUNTVALUE
  NOT_FOUND
}

enum DiscountValueTypeEnum {
  FIXED
  PERCENTAGE
}

type DropzoneError {
  field: String
  message: String
  code: DropzoneErrorCode!
}

enum DropzoneErrorCode {
  GRAPHQL_ERROR
  IO_ERROR
  NOT_FOUND
  NO_PERMISSION
}

type DropzoneImageUpload {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  url: String
  dropzoneErrors: [DropzoneError!]!
}

"""Represents an error in the input of a mutation."""
type Error {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String
}

enum ErrorDetail {
  """
  Unknown error.
  
  This error should only be returned when no other error detail applies.
  If a client sees an unknown errorDetail, it will be interpreted as UNKNOWN.
  
  HTTP Mapping: 500 Internal Server Error
  """
  UNKNOWN

  """
  The requested field is not found in the schema.
  
  This differs from `NOT_FOUND` in that `NOT_FOUND` should be used when a
  query is valid, but is unable to return a result (if, for example, a
  specific video id doesn't exist). `FIELD_NOT_FOUND` is intended to be
  returned by the server to signify that the requested field is not known to exist.
  This may be returned in lieu of failing the entire query.
  See also `PERMISSION_DENIED` for cases where the
  requested field is invalid only for the given user or class of users.
  
  HTTP Mapping: 404 Not Found
  Error Type: BAD_REQUEST
  """
  FIELD_NOT_FOUND

  """
  The provided cursor is not valid.
  
  The most common usage for this error is when a client is paginating
  through a list that uses stateful cursors. In that case, the provided
  cursor may be expired.
  
  HTTP Mapping: 404 Not Found
  Error Type: NOT_FOUND
  """
  INVALID_CURSOR

  """
  The operation is not implemented or is not currently supported/enabled.
  
  HTTP Mapping: 501 Not Implemented
  Error Type: BAD_REQUEST
  """
  UNIMPLEMENTED

  """
  The client specified an invalid argument.
  
  Note that this differs from `FAILED_PRECONDITION`.
  `INVALID_ARGUMENT` indicates arguments that are problematic
  regardless of the state of the system (e.g., a malformed file name).
  
  HTTP Mapping: 400 Bad Request
  Error Type: BAD_REQUEST
  """
  INVALID_ARGUMENT

  """
  The deadline expired before the operation could complete.
  
  For operations that change the state of the system, this error
  may be returned even if the operation has completed successfully.
  For example, a successful response from a server could have been
  delayed long enough for the deadline to expire.
  
  HTTP Mapping: 504 Gateway Timeout
  Error Type: UNAVAILABLE
  """
  DEADLINE_EXCEEDED

  """
  Service Error.
  
  There is a problem with an upstream service.
  
  This may be returned if a gateway receives an unknown error from a service
  or if a service is unreachable.
  If a request times out which waiting on a response from a service,
  `DEADLINE_EXCEEDED` may be returned instead.
  If a service returns a more specific error Type, the specific error Type may
  be returned instead.
  
  HTTP Mapping: 502 Bad Gateway
  Error Type: UNAVAILABLE
  """
  SERVICE_ERROR

  """
  Request throttled based on server CPU limits
  
  HTTP Mapping: 503 Unavailable.
  Error Type: UNAVAILABLE
  """
  THROTTLED_CPU

  """
  Request throttled based on server concurrency limits.
  
  HTTP Mapping: 503 Unavailable
  Error Type: UNAVAILABLE
  """
  THROTTLED_CONCURRENCY

  """
  The server detected that the client is exhibiting a behavior that
  might be generating excessive load.
  
  HTTP Mapping: 429 Too Many Requests or 420 Enhance Your Calm
  Error Type: UNAVAILABLE
  """
  ENHANCE_YOUR_CALM

  """
  Request failed due to network errors.
  
  HTTP Mapping: 503 Unavailable
  Error Type: UNAVAILABLE
  """
  TCP_FAILURE

  """
  Unable to perform operation because a required resource is missing.
  
  Example: Client is attempting to refresh a list, but the specified
  list is expired. This requires an action by the client to get a new list.
  
  If the user is simply trying GET a resource that is not found,
  use the NOT_FOUND error type. FAILED_PRECONDITION.MISSING_RESOURCE
  is to be used particularly when the user is performing an operation
  that requires a particular resource to exist.
  
  HTTP Mapping: 400 Bad Request or 500 Internal Server Error
  Error Type: FAILED_PRECONDITION
  """
  MISSING_RESOURCE
}

enum ErrorType {
  """
  Unknown error.
  
  For example, this error may be returned when
  an error code received from another address space belongs to
  an error space that is not known in this address space.  Also
  errors raised by APIs that do not return enough error information
  may be converted to this error.
  
  If a client sees an unknown errorType, it will be interpreted as UNKNOWN.
  Unknown errors MUST NOT trigger any special behavior. These MAY be treated
  by an implementation as being equivalent to INTERNAL.
  
  When possible, a more specific error should be provided.
  
  HTTP Mapping: 520 Unknown Error
  """
  UNKNOWN

  """
  Internal error.
  
  An unexpected internal error was encountered. This means that some
  invariants expected by the underlying system have been broken.
  This error code is reserved for serious errors.
  
  HTTP Mapping: 500 Internal Server Error
  """
  INTERNAL

  """
  The requested entity was not found.
  
  This could apply to a resource that has never existed (e.g. bad resource id),
  or a resource that no longer exists (e.g. cache expired.)
  
  Note to server developers: if a request is denied for an entire class
  of users, such as gradual feature rollout or undocumented allowlist,
  `NOT_FOUND` may be used. If a request is denied for some users within
  a class of users, such as user-based access control, `PERMISSION_DENIED`
  must be used.
  
  HTTP Mapping: 404 Not Found
  """
  NOT_FOUND

  """
  The request does not have valid authentication credentials.
  
  This is intended to be returned only for routes that require
  authentication.
  
  HTTP Mapping: 401 Unauthorized
  """
  UNAUTHENTICATED

  """
  The caller does not have permission to execute the specified
  operation.
  
  `PERMISSION_DENIED` must not be used for rejections
  caused by exhausting some resource or quota.
  `PERMISSION_DENIED` must not be used if the caller
  cannot be identified (use `UNAUTHENTICATED`
  instead for those errors).
  
  This error Type does not imply the
  request is valid or the requested entity exists or satisfies
  other pre-conditions.
  
  HTTP Mapping: 403 Forbidden
  """
  PERMISSION_DENIED

  """
  Bad Request.
  
  There is a problem with the request.
  Retrying the same request is not likely to succeed.
  An example would be a query or argument that cannot be deserialized.
  
  HTTP Mapping: 400 Bad Request
  """
  BAD_REQUEST

  """
  Currently Unavailable.
  
  The service is currently unavailable.  This is most likely a
  transient condition, which can be corrected by retrying with
  a backoff.
  
  HTTP Mapping: 503 Unavailable
  """
  UNAVAILABLE

  """
  The operation was rejected because the system is not in a state
  required for the operation's execution.  For example, the directory
  to be deleted is non-empty, an rmdir operation is applied to
  a non-directory, etc.
  
  Service implementers can use the following guidelines to decide
  between `FAILED_PRECONDITION` and `UNAVAILABLE`:
  
  - Use `UNAVAILABLE` if the client can retry just the failing call.
  - Use `FAILED_PRECONDITION` if the client should not retry until
  the system state has been explicitly fixed.  E.g., if an "rmdir"
       fails because the directory is non-empty, `FAILED_PRECONDITION`
  should be returned since the client should not retry unless
  the files are deleted from the directory.
  
  HTTP Mapping: 400 Bad Request or 500 Internal Server Error
  """
  FAILED_PRECONDITION
}

type FacebookLink {
  errors: [Error!]!
  customerErrors: [CustomerError!]!
  customer: Customer
}

type FacebookLogin {
  token: String
  errors: [Error!]!
  customerErrors: [CustomerError!]!
  customer: Customer
}

"""Facebook pages."""
type FacebookPage implements Node {
  """The ID of the object."""
  id: ID!

  """Page id."""
  facebookId: String

  """Page name."""
  pageName: String
  unread: Int!
}

enum FulfillStatusFilter {
  RETURNED
  GET_RETURN
}

"""Represents order fulfillment."""
type Fulfillment implements Node & ObjectWithMetadata {
  """The ID of the object."""
  id: ID!

  """"""
  fulfillmentOrder: Int!

  """"""
  status: FulfillmentStatus
  shippingParty: String

  """"""
  trackingNumber: String

  """Shipping status of fulfillment"""
  shippingStatus: String

  """Shipping fee of fulfillment"""
  shippingFee: Int

  """Expected delivery time of fulfillment"""
  expectedDeliveryTime: String

  """"""
  created: DateTime!

  """"""
  checkCapture: Boolean!

  """"""
  total: Float!

  """"""
  payRequired: Float!
  weight: Weight
  goodsIsPicked: Boolean

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of lines for the fulfillment."""
  lines: [FulfillmentLine]
  collects: [WarehouseCollect]

  """User-friendly number of an order."""
  number: String

  """User-friendly fulfillment status."""
  statusDisplay: String

  """Order of the fulfillment"""
  order: Order
  warehouse: Warehouse!
  actions: [String!]
}

"""Cancels existing fulfillment and optionally restocks items."""
type FulfillmentCancel {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """A canceled fulfillment."""
  fulfillment: Fulfillment

  """Order which fulfillment was cancelled."""
  order: Order
  orderErrors: [OrderError!]!
}

"""Cancels existing fulfillment shipping order."""
type FulfillmentCancelShipping {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """A canceled fulfillment."""
  fulfillment: Fulfillment

  """Order which fulfillment shipping order was cancelled."""
  order: Order
  orderErrors: [OrderError!]!
}

type FulfillmentCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [FulfillmentCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type FulfillmentCountableEdge {
  """The item at the end of the edge."""
  node: Fulfillment!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new fulfillment for an order."""
type FulfillmentCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """A created fulfillment."""
  fulfillment: Fulfillment

  """Fulfilled order."""
  order: Order
  orderErrors: [OrderError!]!
}

input FulfillmentCreateInput {
  warehouse: ID!

  """If true, send an email notification to the customer."""
  notifyCustomer: Boolean
  weight: Int!
  payRequired: Decimal!
  created: DateTime

  """Item line to be fulfilled."""
  lines: [FulfillmentLineInput]!
  checkCapture: Boolean
}

input FulfillmentFilterInput {
  """"""
  productSku: String

  """"""
  search: String

  """"""
  goodsIsPicked: Boolean
  created: DateRangeInput

  """"""
  system: Boolean
  shippingStatus: [FulfillStatusFilter]
}

"""Represents line of the fulfillment."""
type FulfillmentLine implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  quantity: Int!
  orderLine: OrderLine
}

input FulfillmentLineInput {
  """The ID of the order line."""
  orderLineId: ID

  """The number of line item(s) to be fulfilled."""
  quantity: Int
}

type FulfillmentRestockLine implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  quantity: Int!
  quantityGood: Int!
  quantityBroken: Int!
  productVariant: ProductVariant
}

enum FulfillmentSortField {
  """Sort fulfillments by number."""
  NUMBER

  """Sort fulfillments by creation date."""
  CREATION_DATE

  """Sort fulfillments by customername."""
  CUSTOMER_NAME
}

input FulfillmentSortInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort fulfillments by the selected field."""
  field: FulfillmentSortField!
}

"""An enumeration."""
enum FulfillmentStatus {
  """Fulfilled"""
  FULFILLED

  """Canceled"""
  CANCELED
  RESTOCKING
  RESTOCKED
}

"""Updates a fulfillment for an order."""
type FulfillmentUpdateTracking {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """A fulfillment with updated tracking."""
  fulfillment: Fulfillment

  """Order for which fulfillment was updated."""
  order: Order
  orderErrors: [OrderError!]!
}

input FulfillmentUpdateTrackingInput {
  """COD amount of package."""
  codAmount: Int

  """ID of service type."""
  shippingParty: String!

  """Tracking number of shipping order"""
  trackingNumber: String!

  """Added by nicholas"""
  shippingStatus: ShippingStatus!
  shippingPrice: Decimal!
  expectedDeliveryTime: DateTime
}

type GeneratePhoneCode {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  customerErrors: [CustomerError!]!
  success: Boolean
}

"""An object scalar"""
scalar GenericScalar

type GetGHNShippingStatus {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """A fulfillment with updated tracking."""
  fulfillment: Fulfillment

  """Order for which fulfillment was updated."""
  order: Order
  log: String
  orderErrors: [OrderError!]!
}

type Group implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  name: String!

  """List of group permissions"""
  permissions: [PermissionDisplay]

  """List of group users"""
  users: [User]
}

type GroupCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [GroupCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type GroupCountableEdge {
  """The item at the end of the edge."""
  node: Group!

  """A cursor for use in pagination."""
  cursor: String!
}

type HomeCollection {
  id: ID!
  isActive: Boolean!
  sortOrder: Int!
  collection: Collection
}

type HomeCollectionCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [HomeCollectionCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type HomeCollectionCountableEdge {
  """The item at the end of the edge."""
  node: HomeCollection!

  """A cursor for use in pagination."""
  cursor: String!
}

type HomeCollectionCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Updated shop."""
  homeCollection: HomeCollection
  shopErrors: [ShopError!]!
}

type HomeCollectionDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  homeCollection: HomeCollection
  shopErrors: [ShopError!]!
}

input HomeCollectionFilterInput {
  isActive: Boolean
}

input HomeCollectionInput {
  isActive: Boolean!
  sortOrder: Int!
  collectionId: ID!
}

type HomeCollectionUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  homeCollection: HomeCollection
  shopErrors: [ShopError!]!
}

type HomeSlide {
  id: ID!
  isActive: Boolean!
  sortOrder: Int!
  portraitImage: Image
  landscapeImage: Image
  collection: Collection!
}

type HomeSlideCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [HomeSlideCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type HomeSlideCountableEdge {
  """The item at the end of the edge."""
  node: HomeSlide!

  """A cursor for use in pagination."""
  cursor: String!
}

type HomeSlideCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Updated shop."""
  homeSlide: HomeSlide
  shopErrors: [ShopError!]!
}

type HomeSlideDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  homeSlide: HomeSlide
  shopErrors: [ShopError!]!
}

input HomeSlideFilterInput {
  isActive: Boolean
}

input HomeSlideInput {
  isActive: Boolean!
  sortOrder: Int!
  portraitImage: Upload
  landscapeImage: Upload
  collectionId: ID!
}

type HomeSlideUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  homeSlide: HomeSlide
  shopErrors: [ShopError!]!
}

"""Represents an image."""
type Image {
  """The URL of the image."""
  url: String!

  """Alt text for an image."""
  alt: String
}

input ImageInput {
  image: Upload
  alt: String
}

input IntRangeInput {
  """Value greater than or equal to."""
  gte: Int

  """Value less than or equal to."""
  lte: Int
}

"""An object scalar"""
scalar JSONString

"""An enumeration."""
enum LanguageCodeEnum {
  EN
  VI
  ZH_HANS
}

type LanguageDisplay {
  """Language code."""
  code: LanguageCodeEnum!

  """Language."""
  language: String!
}

type Margin {
  start: Int
  stop: Int
}

type MessageAttachment implements Node {
  id: ID!
  filePath: String!
  type: String!
  createdAt: DateTime!
}

input MetaInput {
  """Name of metadata client group."""
  namespace: String!

  """Metadata client's name."""
  clientName: String!

  """Key for stored data."""
  key: String!

  """Stored metadata value."""
  value: String!
}

type Metadata {
  id: ID!
  item: MetadataItem
}

type MetadataError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: MetadataErrorCode!
}

"""An enumeration."""
enum MetadataErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
}

input MetadataInput {
  """Key of a metadata item."""
  key: String!

  """Value of a metadata item."""
  value: String!
}

type MetadataItem {
  """Key of a metadata item."""
  key: String!

  """Value of a metadata item."""
  value: String!
}

"""Represents amount of money in specific currency."""
type Money {
  """Currency code."""
  currency: String!

  """Amount of money."""
  amount: Float!

  """Money formatted according to the current locale."""
  localized: String! @deprecated(reason: "DEPRECATED: Will be removed in Saleor 2.11. Price formatting according to the current locale should be handled by the frontend client.")
}

"""Represents a range of amounts of money."""
type MoneyRange {
  """Lower bound of a price range."""
  start: Money

  """Upper bound of a price range."""
  stop: Money
}

input MoveProductInput {
  """The ID of the product to move."""
  productId: ID!

  """
  The relative sorting position of the product (from -inf to +inf) starting from the first given product's actual position.
  """
  sortOrder: Int
}

type Mutation {
  """Creates user address."""
  customerAddressCreate(
    """ID of a customer to create address for."""
    customerId: ID!

    """Fields required to create address."""
    input: CustomerAddressInput!
  ): CustomerAddressCreate

  """Updates an address."""
  customerAddressUpdate(
    """ID of the address to update."""
    id: ID!

    """Fields required to update the address."""
    input: CustomerAddressInput!
  ): CustomerAddressUpdate

  """Deletes an address."""
  customerAddressDelete(
    """ID of the address to delete."""
    id: ID!
  ): CustomerAddressDelete

  """Sets a default address for the given user."""
  customerAddressSetDefault(
    """ID of the address."""
    customerAddressId: ID!

    """ID of the customer to change the address for."""
    customerId: ID!
  ): CustomerAddressSetDefault

  """Creates a new customer."""
  customerCreate(
    """Fields required to create a customer."""
    input: CustomerInput!
  ): CustomerCreate

  """Updates an existing customer."""
  customerUpdate(
    """ID of a customer to update."""
    id: ID!

    """Fields required to update a customer."""
    input: CustomerInput!
  ): CustomerUpdate

  """Deletes a customer."""
  customerDelete(
    """ID of a customer to delete."""
    id: ID!
  ): CustomerDelete

  """Deletes customers."""
  customerBulkDelete(
    """List of sale IDs to delete."""
    ids: [ID]!
  ): CustomerBulkDelete

  """Set customer active."""
  customerBulkSetActive(
    """List of sale IDs to delete."""
    ids: [ID]!
  ): CustomerBulkSetActive

  """Creates a banner."""
  bannerCreate(input: BannerCreateInput!): BannerCreate

  """Creates a banner image."""
  bannerImageCreate(input: BannerImageCreateInput!): BannerImageCreate

  """Update default for banner."""
  bannerUpdateDefault(
    """ID of a banner image to update."""
    id: ID!
  ): BannerUpdateDefault

  """Delete default for banner."""
  bannerDelete(
    """ID of a banner to delete."""
    id: ID!
  ): BannerDelete

  """Update banner image."""
  bannerImageUpdate(
    """ID of a banner image to update."""
    id: ID!

    """arguments for updating banner image."""
    input: BannerImageUpdateInput
  ): BannerImageUpdate

  """Delete default for banner image."""
  bannerImageDelete(
    """ID of a banner image to delete."""
    id: ID!
  ): BannerImageDelete

  """Creates a value for an attribute."""
  propertyValueCreate(
    """Fields required to create an PropertyValue."""
    input: PropertyValueInput!

    """Property to which value will be assigned."""
    property: ID!
  ): PropertyValueCreate

  """Update a property value."""
  propertyValueUpdate(
    """ID of an property."""
    id: ID!

    """Fields required to create an AttributeValue."""
    input: PropertyValueInput!
  ): PropertyValueUpdate

  """Delete a new Property value."""
  propertyValueDelete(
    """ID of a property to delete."""
    id: ID!
  ): PropertyValueDelete

  """Create a new Property."""
  propertyCreate(
    """Fields required to create a Property."""
    input: PropertyInput!
    productId: ID!
  ): PropertyCreate

  """Update a new Property."""
  propertyUpdate(
    """ID of a menu to update."""
    id: ID!

    """Fields required to update a menu."""
    input: PropertyInput!
  ): PropertyUpdate

  """Delete a new Property."""
  propertyDelete(
    """ID of a property to delete."""
    id: ID!
  ): PropertyDelete
  syncChatMessage(input: SyncChatMessageInput!): SyncChatMessage
  sendChatMessage(input: SendChatMessageInput!): SendChatMessage

  """Creates new conversation_tag."""
  createTag(
    """Fields required to create conversation_tag."""
    input: TagInput!
  ): TagCreate

  """Updates conversation_tag."""
  updateTag(
    """ID of a conversation_tag to update."""
    id: ID!

    """Fields required to update conversation_tag."""
    input: TagInput!
  ): TagUpdate

  """Deletes selected conversation_tag."""
  deleteTag(
    """ID of a conversation_tag to delete."""
    id: ID!
  ): TagDelete

  """Creates new default message."""
  createDefaultMessage(
    """Fields required to create chat default message."""
    input: DefaultMessageInput!
  ): DefaultMessageCreate

  """Updates given message."""
  updateDefaultMessage(
    """ID of a message to update."""
    id: ID!

    """Fields required to update message."""
    input: DefaultMessageInput!
  ): DefaultMessageUpdate

  """Deletes selected message."""
  deleteDefaultMessage(
    """ID of a transfer to delete."""
    id: ID!
  ): DefaultMessageDelete

  """Deletes selected message."""
  deleteDefaultMessageImage(
    """ID of default message."""
    defaultMessageId: ID!
    imageUrl: String!
  ): DefaultMessageImageDelete

  """Add tag for a conversation."""
  chatConversationTagAdd(
    """ID of a conversation to update."""
    id: ID!

    """ID of conversation_tag"""
    input: ID!
  ): ChatConversationTagAdd

  """Remove tag for a conversation."""
  chatConversationTagDelete(
    """ID of a conversation to update."""
    id: ID!

    """ID of conversation_tag"""
    input: ID!
  ): ChatConversationTagDelete

  """Creates new shift."""
  createShift(
    """Fields required to create shift."""
    input: ShiftInput!
  ): ShiftCreate

  """Update shift."""
  updateShift(
    """ID of a conversation to update."""
    id: ID!

    """Fields required to create shift."""
    input: ShiftUpdateInput!
  ): ShiftUpdate

  """Updates shift."""
  shiftAssigneeAdd(
    """ID of a shift to update."""
    id: ID!

    """ID of assignee"""
    input: ID!
  ): ShiftAssigneeAdd

  """Remove assignee from a shift."""
  shiftAssigneeRemove(
    """ID of a shift to update."""
    id: ID!

    """ID of assignee"""
    input: ID!
  ): ShiftAssigneeRemove

  """Update conversation status."""
  conversationUpdateStatus(
    """ID of a shift to update."""
    id: ID!
  ): ConversationStatusUpdate

  """Update conversation staff."""
  conversationUpdateStaff(
    """ID of a conversation to update."""
    conversationId: ID!

    """ID of a staff to add."""
    staffId: ID
  ): ConversationStaffUpdate

  """Creates new transfer."""
  createTransferShipper(
    """Fields required to create transfer."""
    input: TransferShipperInput!
  ): TransferShipperCreate

  """Updates given transfer."""
  updateTransferShipper(
    """ID of a transfer to update."""
    id: ID!

    """Fields required to update transfer."""
    input: TransferShipperInput!
  ): TransferShipperUpdate

  """Deletes selected transfer."""
  deleteTransferShipper(
    """ID of a transfer to delete."""
    id: ID!
  ): TransferShipperDelete

  """Creates a new purchase."""
  purchaseCreate(
    """Fields required to create an purchase."""
    input: PurchaseInput!
  ): PurchaseCreate

  """Cancel a purchase."""
  purchaseCancel(
    """ID of a draft purchase to Cancel."""
    id: ID!
  ): PurchaseCancel

  """Create purchase lines for a draft purchase."""
  purchaseLinesCreate(
    """ID of the draft purchase to add the lines to."""
    id: ID!

    """Fields required to add purchase lines."""
    input: PurchaseLineInput!
  ): PurchaseLinesCreate

  """Deletes an purchase line from a draft purchase."""
  purchaseLineDelete(
    """ID of the purchase line to delete."""
    id: ID!
  ): PurchaseLineDelete

  """Updates an purchase line of a draft purchase."""
  purchaseLineUpdate(
    """ID of the purchase line to update."""
    id: ID!

    """Fields required to update an purchase line."""
    input: PurchaseLineInput!
  ): PurchaseLineUpdate

  """Updates a draft purchase."""
  purchaseUpdate(
    """ID of an purchase to update."""
    id: ID!

    """Fields required to update an purchase."""
    input: PurchaseInput!
  ): PurchaseUpdate

  """Cancels existing fulfillment and optionally restocks items."""
  purchaseFulfillmentCancel(
    """ID of an fulfillment to cancel."""
    id: ID!
  ): PurchaseFulfillmentCancel

  """Creates a new fulfillment for an purchase."""
  purchaseFulfillmentCreate(
    """Fields required to create an fulfillment."""
    input: PurchaseFulfillmentInput!

    """ID of the purchase to be fulfilled."""
    purchase: ID!
  ): PurchaseFulfillmentCreate

  """Updates a fulfillment for an purchase."""
  purchaseFulfillmentAddTracking(
    """ID of an fulfillment to update."""
    id: ID!

    """Fields required to update an fulfillment."""
    input: TrackingNumberInput!
  ): PurchaseFulfillmentAddTracking

  """Updates a fulfillment for an purchase."""
  purchaseFulfillmentDeleteTracking(
    """ID of an fulfillment tracking to delete."""
    id: ID!
  ): PurchaseFulfillmentDeleteTracking

  """Adds note to the purchase."""
  purchaseAddNote(
    """ID of the purchase to add a note for."""
    purchase: ID!

    """Fields required to create a note for the purchase."""
    input: PurchaseAddNoteInput!
  ): PurchaseAddNote
  purchaseAddOtherFee(
    """ID of the purchase to add a note for."""
    id: ID!

    """Fields required to create a note for the purchase."""
    input: PurchaseOtherFeeInput!
  ): PurchaseAddOtherFee
  purchaseOtherFeeUpdate(
    """ID of the purchase other fee"""
    id: ID!

    """Fields required to create a note for the purchase."""
    input: PurchaseOtherFeeInput!
  ): PurchaseOtherFeeUpdate
  purchaseOtherFeeDelete(
    """ID of the purchase other fee"""
    id: ID!
  ): PurchaseOtherFeeDelete
  warehouseTransferCreate(input: WarehouseTransferInput!): WarehouseTransferCreate
  warehouseTransferUpdate(id: ID!, input: WarehouseTransferInput!): WarehouseTransferUpdate
  warehouseTransferDelete(id: ID!): WarehouseTransferDelete
  warehouseCollectUpdate(id: ID!, input: WarehouseCollectInput!): WarehouseCollectUpdate

  """Cancels purchases."""
  purchaseBulkCancel(
    """List of purchases IDs to cancel."""
    ids: [ID]!
  ): PurchaseBulkCancel

  """Add product to the current user's wishlist."""
  wishlistAddProduct(
    """The ID of the product."""
    productId: ID!
  ): WishlistAddProductMutation

  """Remove product from the current user's wishlist."""
  wishlistRemoveProduct(
    """The ID of the product."""
    productId: ID!
  ): WishlistRemoveProductMutation

  """Add product variant to the current user's wishlist."""
  wishlistAddVariant(
    """The ID of the product variant."""
    variantId: ID!
  ): WishlistAddProductVariantMutation

  """Remove product variant from the current user's wishlist."""
  wishlistRemoveVariant(
    """The ID of the product variant."""
    variantId: ID!
  ): WishlistRemoveProductVariantMutation

  """Creates new warehouse."""
  createWarehouse(
    """Fields required to create warehouse."""
    input: WarehouseInput!
  ): WarehouseCreate

  """Updates given warehouse."""
  updateWarehouse(
    """ID of a warehouse to update."""
    id: ID!

    """Fields required to update warehouse."""
    input: WarehouseInput!
  ): WarehouseUpdate

  """Deletes selected warehouse."""
  deleteWarehouse(
    """ID of a warehouse to delete."""
    id: ID!
  ): WarehouseDelete

  """Creates new stock."""
  createStock(
    """Fields required to create stock."""
    input: StockInput!
  ): StockCreate

  """Creates new stock."""
  updateStock(
    """Fields required to create stock."""
    input: StockInput!
  ): StockUpdate

  """Update given stock line."""
  updateStockLine(
    """ID of stock to update."""
    id: ID!

    """Fields required to update stock line."""
    input: StockLineUpdateInput!
  ): StockLineUpdate

  """Updates home collection of the shop."""
  homeCollectionCreate(
    """Collection displayed on home."""
    input: HomeCollectionInput!
  ): HomeCollectionCreate

  """Updates home collection of the shop."""
  homeCollectionUpdate(
    """Collection displayed on home."""
    id: ID!
    input: HomeCollectionInput!
  ): HomeCollectionUpdate

  """Updates home collection of the shop."""
  homeCollectionDelete(
    """Collection displayed on home."""
    id: ID!
  ): HomeCollectionDelete

  """Updates home collection of the shop."""
  homeSlideCreate(
    """Collection displayed on home."""
    input: HomeSlideInput!
  ): HomeSlideCreate

  """Updates home collection of the shop."""
  homeSlideUpdate(
    """Collection displayed on home."""
    id: ID!
    input: HomeSlideInput!
  ): HomeSlideUpdate

  """Updates home collection of the shop."""
  homeSlideDelete(
    """Collection displayed on home."""
    id: ID!
  ): HomeSlideDelete

  """Creates a new category."""
  categoryCreate(
    """Fields required to create a category."""
    input: CategoryInput!

    """
    ID of the parent category. If empty, category will be top level category.
    """
    parent: ID
  ): CategoryCreate

  """Deletes a category."""
  categoryDelete(
    """ID of a category to delete."""
    id: ID!
  ): CategoryDelete

  """Deletes categories."""
  categoryBulkDelete(
    """List of category IDs to delete."""
    ids: [ID]!
  ): CategoryBulkDelete

  """Updates a category."""
  categoryUpdate(
    """ID of a category to update."""
    id: ID!

    """Fields required to update a category."""
    input: CategoryInput!
  ): CategoryUpdate

  """Adds products to a collection."""
  collectionAddProducts(
    """ID of a collection."""
    collectionId: ID!

    """List of product IDs."""
    products: [ID]!
  ): CollectionAddProducts

  """Creates a new collection."""
  collectionCreate(
    """Fields required to create a collection."""
    input: CollectionInput!
  ): CollectionCreate

  """Deletes a collection."""
  collectionDelete(
    """ID of a collection to delete."""
    id: ID!
  ): CollectionDelete

  """Reorder the products of a collection."""
  collectionReorderProducts(
    """ID of a collection."""
    collectionId: ID!

    """The collection products position operations."""
    moves: [MoveProductInput]!
  ): CollectionReorderProducts

  """Deletes collections."""
  collectionBulkDelete(
    """List of collection IDs to delete."""
    ids: [ID]!
  ): CollectionBulkDelete

  """Publish collections."""
  collectionBulkPublish(
    """List of collections IDs to (un)publish."""
    ids: [ID]!

    """Determine if collections will be published or not."""
    isPublished: Boolean!
  ): CollectionBulkPublish

  """Remove products from a collection."""
  collectionRemoveProducts(
    """ID of a collection."""
    collectionId: ID!

    """List of product IDs."""
    products: [ID]!
  ): CollectionRemoveProducts

  """Updates a collection."""
  collectionUpdate(
    """ID of a collection to update."""
    id: ID!

    """Fields required to update a collection."""
    input: CollectionInput!
  ): CollectionUpdate

  """Creates a new product."""
  productCreate(
    """Fields required to create a product."""
    input: ProductInput!
  ): ProductCreate

  """Deletes a product."""
  productDelete(
    """ID of a product to delete."""
    id: ID!
  ): ProductDelete
  productSyncGG(id: ID!): ProductSync
  productDeSyncGG(id: ID!): ProductSync

  """Deletes products."""
  productBulkDelete(
    """List of product IDs to delete."""
    ids: [ID]!
  ): ProductBulkDelete

  """Publish products."""
  productBulkPublish(
    """List of products IDs to publish."""
    ids: [ID]!

    """Determine if products will be published or not."""
    isPublished: Boolean!
  ): ProductBulkPublish

  """Updates an existing product."""
  productUpdate(
    """ID of a product to update."""
    id: ID!

    """Fields required to update a product."""
    input: ProductInput!
  ): ProductUpdate
  productBindCrossSells(productId: ID!, crossSells: [ID!]!): ProductBindCrossSells
  productBindUpSells(productId: ID!, upSells: [ID!]!): ProductBindUpSells
  dropzoneImageUpload(
    """Fields required to create a product image."""
    image: Upload!
  ): DropzoneImageUpload

  """
  Create a product image. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
  """
  productImageCreate(
    """Fields required to create a product image."""
    input: ProductImageCreateInput!
  ): ProductImageCreate

  """Deletes a product image."""
  productImageDelete(
    """ID of a product image to delete."""
    id: ID!
  ): ProductImageDelete

  """Deletes product images."""
  productImageBulkDelete(
    """List of product image IDs to delete."""
    ids: [ID]!
  ): ProductImageBulkDelete

  """Changes ordering of the product image."""
  productImageReorder(
    """IDs of a product images in the desired order."""
    imagesIds: [ID]!

    """Id of product that images order will be altered."""
    productId: ID!
  ): ProductImageReorder

  """Creates a new variant for a product."""
  productVariantCreate(
    """Fields required to create a product variant."""
    input: ProductVariantInput!
  ): ProductVariantCreate

  """Updates an existing variant for product."""
  productVariantUpdate(
    """ID of a product variant to update."""
    id: ID!

    """Fields required to update a product variant."""
    input: ProductVariantInput!
  ): ProductVariantUpdate

  """Deletes a product variant."""
  productVariantDelete(
    """ID of a product variant to delete."""
    id: ID!
  ): ProductVariantDelete

  """Creates a new variant for a product."""
  productVariantTranslationCreate(
    """Cost price of the variant."""
    languageCode: LanguageCodeEnum!
    productVariant: ID!

    """Fields required to create a product variant."""
    input: ProductVariantTranslationInput!
  ): ProductVariantTranslationCreate

  """Updates an existing variant for product."""
  productVariantTranslationUpdate(
    """ID of a product variant to update."""
    id: ID!

    """Fields required to update a product variant."""
    input: ProductVariantTranslationInput!
  ): ProductVariantTranslationUpdate

  """Deletes a product variant."""
  productVariantTranslationDelete(
    """ID of a product variant to delete."""
    id: ID!
  ): ProductVariantTranslationDelete

  """Creates a new variant for a product."""
  productVariantBundleCreate(
    """Fields required to create a product variant."""
    input: ProductVariantBundleInput!
  ): ProductVariantBundleCreate

  """Updates an existing variant for product."""
  productVariantBundleUpdate(
    """ID of a product variant to update."""
    id: ID!

    """Fields required to update a product variant."""
    input: ProductVariantBundleInput!
  ): ProductVariantBundleUpdate

  """Deletes a product variant."""
  productVariantBundleDelete(
    """ID of a product variant to delete."""
    id: ID!
  ): ProductVariantBundleDelete
  productVariantBulkPublish(
    """List of products IDs to publish."""
    ids: [ID]!

    """Determine if products will be published or not."""
    isPublished: Boolean!
  ): ProductVariantBulkPublish

  """Assign an image to a product variant."""
  variantImageAssign(
    """ID of a product image to assign to a variant."""
    imageId: ID!

    """ID of a product variant."""
    variantId: ID!
  ): VariantImageAssign

  """Unassign an image from a product variant."""
  variantImageUnassign(
    """ID of a product image to unassign from a variant."""
    imageId: ID!

    """ID of a product variant."""
    variantId: ID!
  ): VariantImageUnassign
  productReviewCreate(productId: ID!, input: ProductReviewInput!): ProductReviewCreate
  productReviewUpdate(reviewId: ID!, input: ProductReviewInput!): ProductReviewUpdate
  productReviewReply(reviewId: ID!, input: ProductReviewInput!): ProductReviewReply
  productReviewDelete(reviewId: ID!): ProductReviewDelete
  createPayment(orderId: ID!, input: PaymentInput): PaymentCreate
  capturePayment(
    """Transaction amount."""
    gateWay: String

    """Payment ID."""
    paymentId: ID!
  ): PaymentCapture
  confirmPayment(
    """Transaction amount."""
    gateWay: String

    """Payment ID."""
    paymentId: ID!
  ): PaymentConfirm

  """Refunds the captured payment amount."""
  paymentRefund(orderId: ID!, input: PaymentInput): PaymentRefund
  confirmRefundPayment(
    gateWay: String

    """Payment ID."""
    paymentId: ID!
  ): PaymentConfirmRefund

  """Voids the authorized payment."""
  paymentVoid(
    """Payment ID."""
    paymentId: ID!
  ): PaymentVoid
  paymentTransactionDelete(transactionId: ID!): PaymentTransactionDelete

  """Creates a new page."""
  pageCreate(
    """Fields required to create a page."""
    input: PageInput!
  ): PageCreate

  """Deletes a page."""
  pageDelete(
    """ID of a page to delete."""
    id: ID!
  ): PageDelete

  """Deletes pages."""
  pageBulkDelete(
    """List of page IDs to delete."""
    ids: [ID]!
  ): PageBulkDelete

  """Publish pages."""
  pageBulkPublish(
    """List of page IDs to (un)publish."""
    ids: [ID]!

    """Determine if pages will be published or not."""
    isPublished: Boolean!
  ): PageBulkPublish

  """Updates an existing page."""
  pageUpdate(
    """ID of a page to update."""
    id: ID!

    """Fields required to update a page."""
    input: PageInput!
  ): PageUpdate

  """Creates a new order."""
  orderCreate(
    """Fields required to create an order."""
    input: OrderInput!
  ): OrderCreate

  """not for dashboard, replace orderFBUpdate"""
  orderUpdate(
    id: ID!

    """Fields required to create an order."""
    input: OrderInput!
  ): OrderUpdate
  orderUpdateAddress(id: ID!, address: AddressInput!): OrderUpdateAddress

  """Adds note to the order."""
  orderAddNote(
    """ID of the order to add a note for."""
    order: ID!

    """Fields required to create a note for the order."""
    input: OrderAddNoteInput!
  ): OrderAddNote

  """Cancel an order."""
  orderCancel(
    """ID of the order to cancel."""
    id: ID!

    """Determine if lines will be restocked or not."""
    restock: Boolean!
  ): OrderCancel
  orderStatusUpdate(id: ID!, status: OrderStatus, channel: OrderChannel): OrderUpdate

  """Cancels existing fulfillment and optionally restocks items."""
  orderFulfillmentCancel(
    """ID of an fulfillment to cancel."""
    id: ID!
  ): FulfillmentCancel
  orderFulfillmentUpdateAddress(id: ID!, address: AddressInput!): FulfillmentUpdateTracking
  orderFulfillmentUpdateCOD(id: ID!, payRequired: Decimal!): FulfillmentUpdateTracking

  """Creates a new fulfillment for an order."""
  orderFulfillmentCreate(
    """Fields required to create an fulfillment."""
    input: FulfillmentCreateInput!

    """ID of the order to be fulfilled."""
    order: ID
  ): FulfillmentCreate
  createGHNShipping(
    """ID of the order fulfillment."""
    id: ID!
  ): FulfillmentUpdateTracking
  getGHNShippingStatus(
    """ID of an fulfillment to update."""
    id: ID!
  ): GetGHNShippingStatus
  createZTOShipping(
    """ID of the order fulfillment."""
    id: ID!
  ): FulfillmentUpdateTracking

  """Updates a fulfillment for an order."""
  orderFulfillmentUpdateTracking(
    """ID of an fulfillment to update."""
    id: ID!

    """Fields required to update an fulfillment."""
    input: FulfillmentUpdateTrackingInput!
  ): FulfillmentUpdateTracking

  """Delete metadata of an object."""
  deleteMetadata(
    """ID of an object to update."""
    id: ID!

    """Metadata key to delete."""
    key: String!
  ): DeleteMetadata

  """Delete object's private metadata."""
  deletePrivateMetadata(
    """ID of an object to update."""
    id: ID!

    """Metadata key to delete."""
    key: String!
  ): DeletePrivateMetadata

  """Updates metadata of an object."""
  updateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update the object's metadata."""
    input: MetadataInput!
  ): UpdateMetadata

  """Updates private metadata of an object."""
  updatePrivateMetadata(
    """ID of an object to update."""
    id: ID!

    """Fields required to update the object's metadata."""
    input: MetadataInput!
  ): UpdatePrivateMetadata

  """Creates a new voucher."""
  voucherCreate(
    """Fields required to create a voucher."""
    input: VoucherInput!
  ): VoucherCreate

  """Deletes a voucher."""
  voucherDelete(
    """ID of a voucher to delete."""
    id: ID!
  ): VoucherDelete

  """Deletes vouchers."""
  voucherBulkDelete(
    """List of voucher IDs to delete."""
    ids: [ID]!
  ): VoucherBulkDelete

  """Updates a voucher."""
  voucherUpdate(
    """ID of a voucher to update."""
    id: ID!

    """Fields required to update a voucher."""
    input: VoucherInput!
  ): VoucherUpdate
  tokenCreateStaff(email: String!, password: String!): CreateTokenStaff
  tokenRefreshStaff(token: String!): RefreshStaff

  """Mutation that confirms if token is valid and also returns user data."""
  tokenVerifyStaff(token: String!): VerifyTokenStaff
  facebookLogin(
    """email of facebook."""
    email: String

    """ASID of facebook."""
    asid: String!
  ): FacebookLogin
  facebookLink(customer: ID!, asid: String!, email: String): FacebookLink
  customerEmailLogin(email: String!, password: String!): CustomerLogin
  customerPhonePasswordLogin(phone: String!, password: String!): CustomerLogin
  customerPhoneCodeLogin(phone: String!, code: String!): CustomerLogin
  tokenRefreshCustomer(token: String!): RefreshCustomer

  """Mutation that confirms if token is valid and also returns user data."""
  tokenVerifyCustomer(token: String!): VerifyTokenCustomer

  """
  Completes the checkout. As a result a new order is created and a payment charge is made. This action requires a successful payment before it can be performed. In case additional confirmation step as 3D secure is required confirmationNeeded flag will be set to True and no order created until payment is confirmed with second call of this mutation.
  """
  checkoutComplete(
    """Checkout ID."""
    checkoutId: ID!
    conversationId: ID
  ): CheckoutComplete
  checkoutApplyVoucher(
    """Checkout ID."""
    checkoutId: ID!
    voucherId: ID
  ): CheckoutApplyVoucher

  """Create a new checkout."""
  checkoutCreate(
    """Fields required to create checkout."""
    input: CheckoutCreateInput!
  ): CheckoutCreate

  """
  Completes the checkout. As a result a new order is created and a payment charge is made. This action requires a successful payment before it can be performed. In case additional confirmation step as 3D secure is required confirmationNeeded flag will be set to True and no order created until payment is confirmed with second call of this mutation.
  """
  checkoutDelete(
    """Checkout ID."""
    checkoutId: ID!
  ): CheckoutDelete

  """Deletes a CheckoutLine."""
  checkoutLineDelete(
    """The ID of the checkout."""
    checkoutId: ID!

    """ID of the checkout line to delete."""
    lineId: ID!
  ): CheckoutLineDelete

  """Adds a checkout line to the existing checkout."""
  checkoutLinesAdd(
    """The ID of the checkout."""
    checkoutId: ID!

    """
    A list of checkout lines, each containing information about an item in the checkout.
    """
    lines: [CheckoutLineInput]!
  ): CheckoutLinesAdd

  """Updates checkout line in the existing checkout."""
  checkoutLinesUpdate(
    """The ID of the checkout."""
    checkoutId: ID!

    """
    A list of checkout lines, each containing information about an item in the checkout.
    """
    lines: [CheckoutLineInput]!
  ): CheckoutLinesUpdate

  """Update shipping address in the existing checkout."""
  checkoutShippingAddressUpdate(
    """ID of the checkout."""
    checkoutId: ID!

    """The mailing address to where the checkout will be shipped."""
    shippingAddress: AddressInput!
  ): CheckoutShippingAddressUpdate
  confirmCustomer(
    """E-mail of the user performing account confirmation."""
    email: String!

    """A one-time token required to set the password."""
    token: String!
  ): ConfirmCustomer
  setStaffPassword(staff: ID!, newPassword: String!): SetStaffPassword

  """
  Sets the user's password from the token sent by email using the RequestPasswordReset mutation.
  """
  setCustomerPasswordByEmail(
    """A one-time token required to set the password."""
    token: String!
    email: String!
    password: String!
  ): SetCustomerPassword

  """
  Sets the user's password from the token sent by email using the RequestPasswordReset mutation.
  """
  setCustomerPasswordByPhone(
    """A one-time token required to set the password."""
    code: String!
    phone: String!
    password: String!
  ): SetCustomerPassword

  """Change the password of the logged in user."""
  staffPasswordChange(
    """New user password."""
    newPassword: String!

    """Current user password."""
    oldPassword: String!
  ): StaffPasswordChange
  customerPasswordChange(
    """New user password."""
    newPassword: String!

    """Current user password."""
    oldPassword: String
  ): CustomerPasswordChange
  customerEmailChange(
    """New user password."""
    newEmail: String!
    redirectUrl: String!
  ): CustomerEmailChange
  customerPhoneChange(
    """New user password."""
    phone: String!
    code: String!
  ): CustomerPhoneChange
  requestCustomerPasswordResetByEmail(
    email: String!

    """
    URL of a view where users should be redirected to update the email address. URL in RFC 1808 format.
    """
    redirectUrl: String!
  ): RequestCustomerPasswordReset
  requestCustomerPasswordResetByPhone(phone: String!): RequestCustomerPasswordReset
  customerEmailRegister(
    """Fields required to create a user."""
    input: CustomerEmailRegisterInput!
  ): CustomerRegister
  generatePhoneCode(phone: String!, new: Boolean!): GeneratePhoneCode
  verifyPhoneCode(phone: String!, code: String!): VerifyPhoneCode
  customerPhoneRegister(
    """Fields required to create a user."""
    input: CustomerPhoneRegisterInput!
  ): CustomerRegister

  """Creates a new staff user."""
  staffCreate(
    """Fields required to create a staff user."""
    input: StaffInput!
    password: String!
  ): StaffCreate

  """Updates an existing staff user."""
  staffUpdate(
    """ID of a staff user to update."""
    id: ID!

    """Fields required to update a staff user."""
    input: StaffInput!
  ): StaffUpdate

  """
  Create a user avatar. Only for staff members. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
  """
  staffAvatarUpdate(
    """Represents an image file in a multipart request."""
    image: Upload!
  ): StaffAvatarUpdate
  customerAvatarUpdate(
    """Represents an image file in a multipart request."""
    image: Upload!
  ): CustomerAvatarUpdate

  """Deletes a user avatar. Only for staff members."""
  staffAvatarDelete: StaffAvatarDelete
  customerAvatarDelete: CustomerAvatarDelete

  """Creates a new service account."""
  serviceAccountCreate(
    """Fields required to create a new service account."""
    input: ServiceAccountInput!
  ): ServiceAccountCreate

  """Updates an existing service account."""
  serviceAccountUpdate(
    """ID of a service account to update."""
    id: ID!

    """Fields required to update an existing service account."""
    input: ServiceAccountInput!
  ): ServiceAccountUpdate

  """Deletes a service account."""
  serviceAccountDelete(
    """ID of a service account to delete."""
    id: ID!
  ): ServiceAccountDelete

  """Creates a new token."""
  serviceAccountTokenCreate(
    """Fields required to create a new auth token."""
    input: ServiceAccountTokenInput!
  ): ServiceAccountTokenCreate

  """Deletes an authentication token assigned to service account."""
  serviceAccountTokenDelete(
    """ID of an auth token to delete."""
    id: ID!
  ): ServiceAccountTokenDelete

  """Create new permission group."""
  permissionGroupCreate(
    """Input fields to create permission group."""
    input: PermissionGroupInput!
  ): PermissionGroupCreate

  """Update permission group."""
  permissionGroupUpdate(
    """ID of the group to update."""
    id: ID!

    """Input fields to create permission group."""
    input: PermissionGroupInput!
  ): PermissionGroupUpdate

  """Delete permission group."""
  permissionGroupDelete(
    """ID of the group to delete."""
    id: ID!
  ): PermissionGroupDelete

  """Assign users to group."""
  permissionGroupAssignUsers(
    """ID of the group to which users will be assigned."""
    id: ID!

    """List of users to assign to this group."""
    users: [ID!]!
  ): PermissionGroupAssignUsers

  """Unassign users from group."""
  permissionGroupUnassignUsers(
    """ID of group from which users will be unassigned."""
    id: ID!

    """List of users to assign to this group."""
    users: [ID!]!
  ): PermissionGroupUnassignUsers
  shippingMethodCreate(input: ShippingMethodInput): ShippingMethodCreate
  shippingMethodUpdate(id: ID!, input: ShippingMethodInput): ShippingMethodUpdate
  shippingMethodDelete(id: ID!): ShippingMethodDelete
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

interface ObjectWithMetadata {
  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!
}

"""Represents an order in the shop."""
type Order implements Node & ObjectWithMetadata {
  """The ID of the object."""
  id: ID!

  """"""
  created: DateTime!

  """"""
  status: OrderStatus!
  paymentStatus: OrderPaymentStatus

  """"""
  customer: Customer

  """"""
  shippingAddress: OrderAddress

  """Total cost price of shipping."""
  shippingPrice: TaxedMoney

  """"""
  voucher: Voucher
  discount: Money

  """"""
  customerNote: String
  weight: Weight

  """Amount unused captured by ."""
  unusedCaptured: Money

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of shipments for the order."""
  fulfillments: [Fulfillment]!

  """List of order lines."""
  lines: [OrderLine]!

  """User-friendly number of an order."""
  number: String

  """Informs if an order is fully paid."""
  isPaid: Boolean

  """List of payments for the order."""
  payments: [Payment]

  """Total amount of the order."""
  total: TaxedMoney

  """The sum of line prices not including shipping."""
  subtotal: TaxedMoney
  costTotal: Money

  """User-friendly order status."""
  statusDisplay: String

  """Amount authorized for the order."""
  totalAuthorized: Money

  """Amount captured by payment."""
  totalCaptured: Money

  """List of events associated with the order."""
  events: [OrderEvent]

  """The difference between the paid and the order total amount."""
  totalBalance: Money!

  """The creator of the order."""
  creator: User

  """List of order other fee."""
  otherFees: [OrderOtherFee]!

  """Order discount"""
  discountOrder: Money

  """Order channel."""
  channel: OrderChannel
}

"""Adds note to the order."""
type OrderAddNote {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Order with the note added."""
  order: Order
  orderErrors: [OrderError!]!
}

input OrderAddNoteInput {
  """Note message."""
  message: String!
}

"""Represents user address data."""
type OrderAddress implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  name: String

  """"""
  companyName: String

  """"""
  streetAddress1: String

  """"""
  streetAddress2: String

  """"""
  city: String

  """"""
  district: String

  """"""
  ward: String

  """"""
  postalCode: String

  """Shop's default country."""
  country: CountryDisplay

  """"""
  phone: String
}

"""Cancel an order."""
type OrderCancel {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Canceled order."""
  order: Order
  orderErrors: [OrderError!]!
}

"""Capture an order."""
type OrderCapture {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Captured order."""
  order: Order
  orderErrors: [OrderError!]!
}

enum OrderChannel {
  SHOPEE_ANNA_LALA_LADY
  SHOPEE_GLAMFLAIR_LONDON
  SHOPEE_ANNA_LALA_FOOD
  SHOPEE_ANNA_LALA_TECHNOLOGY
  SHOPEE_ANNA_LALA_FASHION
  SHOPEE_ANNA_LALA_SELECTED
  LAZADA_ANNA_LALA_FOOD
  LAZADA_ANNA_LALA_LADY
  WEBSITE
  FACEBOOK
  DASHBOARD
}

type OrderCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [OrderCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type OrderCountableEdge {
  """The item at the end of the edge."""
  node: Order!

  """A cursor for use in pagination."""
  cursor: String!
}

type OrderCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Canceled order."""
  order: Order
  orderErrors: [OrderError!]!
}

enum OrderDirection {
  """Specifies an ascending sort order."""
  ASC

  """Specifies a descending sort order."""
  DESC
}

type OrderError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: OrderErrorCode!
}

"""An enumeration."""
enum OrderErrorCode {
  BILLING_ADDRESS_NOT_SET
  CANNOT_CANCEL_FULFILLMENT
  CANNOT_CREATE_SHIPPING
  CANNOT_GET_SHIPPING
  CANNOT_CANCEL_SHIPPING
  CANNOT_UPDATE_SHIPPING
  CANNOT_UPDATE_SHIPPING_COD
  CANNOT_UPDATE_SHIPPING_ADDRESS
  CANNOT_CANCEL_ORDER
  CANNOT_DELETE
  CANNOT_REFUND
  CAPTURE_INACTIVE_PAYMENT
  NOT_EDITABLE
  FULFILL_ORDER_LINE
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  ORDER_NO_SHIPPING_ADDRESS
  SHIPPING_ADDRESS_WRONG
  SHIPPING_SERVER_ERROR
  PAYMENT_ERROR
  PAYMENT_MISSING
  REQUIRED
  SHIPPING_METHOD_NOT_APPLICABLE
  SHIPPING_METHOD_REQUIRED
  UNIQUE
  VOID_INACTIVE_PAYMENT
  ZERO_QUANTITY
  QUANTITY_GREATER_THAN_LIMIT
  CREATOR_NULL
}

"""History log of the order."""
type OrderEvent implements Node {
  """The ID of the object."""
  id: ID!

  """Date when event happened at in ISO 8601 format."""
  date: DateTime

  """Order event type."""
  type: OrderEventsEnum

  """User who performed the action."""
  creator: User

  """Content of the event."""
  parameters: [MetadataItem]
  order: Order!
}

type OrderEventCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [OrderEventCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type OrderEventCountableEdge {
  """The item at the end of the edge."""
  node: OrderEvent!

  """A cursor for use in pagination."""
  cursor: String!
}

type OrderEventOrderLineObject {
  """The variant quantity."""
  quantity: Int

  """The order line."""
  orderLine: OrderLine

  """The variant name."""
  itemName: String
}

"""An enumeration."""
enum OrderEventsEmailsEnum {
  PAYMENT_CONFIRMATION
  SHIPPING_CONFIRMATION
  TRACKING_UPDATED
  ORDER_CONFIRMATION
  FULFILLMENT_CONFIRMATION
  DIGITAL_LINKS
}

"""An enumeration."""
enum OrderEventsEnum {
  DRAFT_CREATED
  DRAFT_ADDED_PRODUCTS
  DRAFT_REMOVED_PRODUCTS
  PLACED
  PLACED_FROM_DRAFT
  OVERSOLD_ITEMS
  CANCELED
  ORDER_MARKED_AS_PAID
  ORDER_COLLECT_PREPAID
  ORDER_REFUND_PREPAID
  ORDER_FULLY_PAID
  UPDATED_ADDRESS
  EMAIL_SENT
  PAYMENT_CAPTURED
  PAYMENT_REFUNDED
  PAYMENT_VOIDED
  PAYMENT_FAILED
  FULFILLMENT_CANCELED
  FULFILLMENT_RESTOCKED_ITEMS
  FULFILLMENT_FULFILLED_ITEMS
  TRACKING_UPDATED
  NOTE_ADDED
  OTHER
}

input OrderFilterInput {
  productSku: String
  productName: String
  status: [OrderStatusFilter]

  """"""
  creator: String

  """"""
  customerId: ID
  customerName: String
  customerPhone: String
  created: DateRangeInput

  """"""
  search: String
  channel: Boolean
}

input OrderInput {
  customer: ID

  """Discount amount for the order."""
  discount: Decimal

  """Shipping address of the customer."""
  shippingAddress: AddressInput

  """A note from a customer. Visible by customers in the order summary."""
  customerNote: String

  """Variant line input consisting of variant ID and quantity of products."""
  lines: [OrderLineInput!]!
  otherFees: [OrderOtherFeeInput!]
  createdDate: DateTime!
  payments: [PaymentInput!]
  channel: OrderChannel!
  creator: ID
  totalAmount: Decimal
}

"""Represents order line of particular order."""
type OrderLine implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  productName: String!

  """"""
  variantName: String!

  """"""
  isShippingRequired: Boolean!

  """"""
  quantity: Int!

  """"""
  quantityFulfilled: Int!

  """"""
  taxRate: Float!

  """Price of the single item in the order line."""
  unitPrice: TaxedMoney
  discount: TaxedMoney

  """
  A purchased product variant. Note: this field may be null if the variant has been removed from stock at all.
  """
  variant: ProductVariant

  """Product name in the customer's language"""
  translatedProductName: String!

  """Variant name in the customer's language"""
  translatedVariantName: String!
  total: TaxedMoney
}

input OrderLineInput {
  """Number of variant items ordered."""
  quantity: Int!
  variantId: ID
  variantName: String
  unitPriceAmount: Decimal!
  discount: Decimal!
}

"""Other fee"""
type OrderOtherFee implements Node {
  """The ID of the object."""
  id: ID!
  type: OrderOtherFeeType!
  otherFeePrice: TaxedMoney!
  otherFeeDescription: String
  currency: String!
}

input OrderOtherFeeInput {
  type: OrderOtherFeeType!
  priceAmount: Decimal!
  token: String
}

enum OrderOtherFeeType {
  SHIPPING_FEE
  SHOPEE_SUBSIDY
  OTHER
}

enum OrderPaymentStatus {
  NONE
  PARTIAL
  FULL
}

enum OrderSortField {
  NUMBER
  CREATION_DATE
  PAYMENT
  FULFILLMENT_STATUS
  TOTAL
}

input OrderSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort orders by the selected field."""
  field: OrderSortField!
}

"""An enumeration."""
enum OrderStatus {
  """Placed"""
  PLACED

  """Partially fulfilled"""
  PARTIALLY_FULFILLED

  """Fulfilled"""
  FULFILLED
  FINISH

  """Canceled"""
  CANCELED
}

enum OrderStatusFilter {
  """Placed"""
  PLACED

  """Partially fulfilled"""
  PARTIALLY_FULFILLED

  """Fulfilled"""
  FULFILLED
  FINISH

  """Canceled"""
  CANCELED
}

type OrderUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Canceled order."""
  order: Order
  orderErrors: [OrderError!]!
}

type OrderUpdateAddress {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Canceled order."""
  order: Order
  orderErrors: [OrderError!]!
}

"""Updates a shipping method of the order."""
type OrderUpdateShipping {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Order with updated shipping method."""
  order: Order
  orderErrors: [OrderError!]!
}

input OrderUpdateShippingInput {
  """ID of the selected shipping method."""
  shippingMethod: ID
}

"""
A static page that can be manually added by a shop operator through the dashboard.
"""
type Page implements Node {
  """"""
  seoTitle: String

  """"""
  seoDescription: String

  """The ID of the object."""
  id: ID!

  """"""
  title: String!

  """"""
  content: String!

  """"""
  contentJson: JSONString!

  """"""
  publicationDate: Date

  """"""
  isPublished: Boolean!

  """"""
  slug: String!

  """"""
  created: DateTime!
}

"""Deletes pages."""
type PageBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Returns how many objects were affected."""
  count: Int!
}

"""Publish pages."""
type PageBulkPublish {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Returns how many objects were affected."""
  count: Int!
}

type PageCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [PageCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type PageCountableEdge {
  """The item at the end of the edge."""
  node: Page!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new page."""
type PageCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  pageErrors: [PageError!]!
  page: Page
}

"""Deletes a page."""
type PageDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  pageErrors: [PageError!]!
  page: Page
}

type PageError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: PageErrorCode!
}

"""An enumeration."""
enum PageErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input PageFilterInput {
  """"""
  search: String
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

input PageInput {
  """Page internal name."""
  slug: String

  """Page title."""
  title: String

  """Page content. May consist of ordinary text, HTML and images."""
  content: String

  """Page content in JSON format."""
  contentJson: JSONString

  """Determines if page is visible in the storefront."""
  isPublished: Boolean

  """Publication date. ISO 8601 standard."""
  publicationDate: String

  """Search engine optimization fields."""
  seo: SeoInput
}

enum PageSortField {
  """Sort pages by title."""
  TITLE

  """Sort pages by slug."""
  SLUG

  """Sort pages by visibility."""
  VISIBILITY

  """Sort pages by creation date."""
  CREATION_DATE

  """Sort pages by publication date."""
  PUBLICATION_DATE
}

input PageSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort pages by the selected field."""
  field: PageSortField!
}

"""Updates an existing page."""
type PageUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  pageErrors: [PageError!]!
  page: Page
}

"""Represents a payment of a given type."""
type Payment implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  gateway: String!
  type: PaymentType

  """"""
  isActive: Boolean!

  """"""
  toConfirm: Boolean!

  """"""
  created: DateTime!

  """"""
  modified: DateTime!

  """"""
  token: String

  """"""
  order: Order

  """Internal payment status."""
  chargeStatus: PaymentChargeStatus!

  """Total amount of the payment."""
  total: Money

  """Total amount captured for this payment."""
  capturedAmount: Money

  """Total amount unused captured for this payment."""
  unusedCapturedAmount: Money

  """List of all transactions within this payment."""
  transactions: [Transaction]
}

type PaymentCapture {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Updated payment."""
  payment: Payment
  paymentErrors: [PaymentError!]!
}

"""An enumeration."""
enum PaymentChargeStatus {
  NOT_CHARGED
  CHARGED
  REFUNDED
}

type PaymentConfirm {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Updated payment."""
  payment: Payment
  paymentErrors: [PaymentError!]!
}

"""Refunds the captured payment amount."""
type PaymentConfirmRefund {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Updated payment."""
  payment: Payment
  paymentErrors: [PaymentError!]!
}

type PaymentCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [PaymentCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type PaymentCountableEdge {
  """The item at the end of the edge."""
  node: Payment!

  """A cursor for use in pagination."""
  cursor: String!
}

type PaymentCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Updated payment."""
  payment: Payment
  paymentErrors: [PaymentError!]!
}

type PaymentError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: PaymentErrorCode!
}

"""An enumeration."""
enum PaymentErrorCode {
  BILLING_ADDRESS_NOT_SET
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  PARTIAL_PAYMENT_NOT_ALLOWED
  PAYMENT_ERROR
  REQUIRED
  UNIQUE
  CANNOT_CREATE
  CANNOT_CAPTURE
  CANNOT_CONFIRM
  CANNOT_REFUND
  CANNOT_VOID
  CANNOT_DELETE
}

input PaymentFilterInput {
  type: PaymentType
  status: PaymentChargeStatus
  isActive: Boolean
  toConfirm: Boolean
  created: DateRangeInput
  modified: DateRangeInput
  search: String
}

input PaymentInput {
  """A gateway to use with that payment."""
  gateway: String
  type: PaymentType

  """
  Client-side generated payment token, representing customer's billing data in a secure manner.
  """
  token: String

  """
  Total amount of the transaction, including all taxes and discounts. If no amount is provided, the checkout total will be used.
  """
  amount: Decimal!
}

type PaymentRefund {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Updated payment."""
  payment: Payment
  paymentErrors: [PaymentError!]!
}

enum PaymentSortField {
  CREATED_DATE
  MODIFIED_DATE
}

input PaymentSortInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort fulfillments by the selected field."""
  field: PaymentSortField!
}

type PaymentTransactionDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Updated payment."""
  payment: Payment
  paymentErrors: [PaymentError!]!
}

enum PaymentType {
  SUBSIDY
  PREPAID
  COD
  REFUND
}

"""Voids the authorized payment."""
type PaymentVoid {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Updated payment."""
  payment: Payment
  paymentErrors: [PaymentError!]!
}

"""Represents a permission object in a friendly form."""
type PermissionDisplay {
  """Internal code for permission."""
  code: PermissionEnum!

  """Describe action(s) allowed to do by permission."""
  name: String!
}

"""An enumeration."""
enum PermissionEnum {
  MANAGE_ACCOUNT
  MANAGE_CHECKOUT
  MANAGE_CUSTOMER
  MANAGE_METADATA
  MANAGE_PAYMENT
  MANAGE_PURCHASE
  MANAGE_SERVICEACCOUNT
  MANAGE_SHIPPING
  MANAGE_STOCK
  MANAGE_WAREHOUSE
  MANAGE_CHAT
  MANAGE_COMMON
  MANAGE_DISCOUNT
  MANAGE_ORDER
  MANAGE_FULFILLMENT
  MANAGE_PRODUCT
  MANAGE_REVIEW
  MANAGE_SETTINGS
  MANAGE_STAFF
  MANAGE_WISHLIST
}

"""Assign users to group."""
type PermissionGroupAssignUsers {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  group: Group
  accountErrors: [AccountError!]!
}

"""Create new permission group."""
type PermissionGroupCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  group: Group
  accountErrors: [AccountError!]!
}

"""Delete permission group."""
type PermissionGroupDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  accountErrors: [AccountError!]!
  group: Group
}

input PermissionGroupFilterInput {
  """"""
  search: String
}

input PermissionGroupInput {
  """Group name."""
  name: String!

  """List of permission code names to assign to this group."""
  permissions: [PermissionEnum!]!
}

enum PermissionGroupSortField {
  """Sort permission group accounts by name."""
  NAME
}

input PermissionGroupSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort permission group by the selected field."""
  field: PermissionGroupSortField!
}

"""Unassign users from group."""
type PermissionGroupUnassignUsers {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  group: Group
  accountErrors: [AccountError!]!
}

"""Update permission group."""
type PermissionGroupUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  group: Group
  accountErrors: [AccountError!]!
}

input PriceRangeInput {
  """Price greater than or equal to."""
  gte: Float

  """Price less than or equal to."""
  lte: Float
}

"""Represents an individual item for sale in the storefront."""
type Product implements Node & ObjectWithMetadata {
  """The ID of the object."""
  id: ID!

  """"""
  seoTitle: String

  """"""
  seoDescription: String

  """"""
  name: String!
  brand: String

  """"""
  shortDescription: String

  """"""
  description: String!

  """"""
  descriptionJson: JSONString!

  """"""
  publicationDate: Date

  """"""
  isPublished: Boolean!

  """Does the product contain variants"""
  hasVariants: Boolean!

  """"""
  slug: String!

  """"""
  category: Category

  """"""
  updatedAt: DateTime

  """The creator of the product."""
  creator: User

  """"""
  chargeTaxes: Boolean!
  weight: Weight
  properties: [ProductProperty]

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """The main thumbnail for a product."""
  thumbnail(
    """Size of thumbnail."""
    size: Int
  ): Image

  """
  Lists the storefront product's pricing, the current price and discounts, only meant for displaying.
  """
  pricing: ProductPricingInfo

  """Whether the product is in stock and visible or not."""
  isAvailable: Boolean

  """The product's default base price."""
  basePrice: Money
  purchaseCost: MoneyRange
  margin: Margin

  """Get a single product image by ID."""
  imageById(
    """ID of a product image."""
    id: ID
  ): ProductImage

  """List of variants for the product."""
  variants(filter: ProductVariantFilterInput): [ProductVariant]

  """List of images for the product."""
  images: [ProductImage]

  """List of collections for the product."""
  collections: [Collection]

  """The product's default base price."""
  costPriceAmount: Money
  reviews(before: String, after: String, first: Int, last: Int): ProductReviewCountableConnection
  totalReviews: Int!
  averageRate: Float
  crossSells(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductCountableConnection
  upSells(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductCountableConnection
}

type ProductBindCrossSells {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  product: Product
}

type ProductBindUpSells {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  product: Product
}

"""Deletes products."""
type ProductBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]!
}

"""Publish products."""
type ProductBulkPublish {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]!
}

type ProductCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ProductCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ProductCountableEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

type ProductCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  product: Product
}

input ProductCreateInput {
  """Publication date. ISO 8601 standard."""
  publicationDate: Date

  """ID of the product's category."""
  category: ID

  """Determine if taxes are being charged for the product."""
  chargeTaxes: Boolean

  """Product description (HTML/text)."""
  description: String

  """Product description (JSON)."""
  descriptionJson: JSONString

  """Determines if product is visible to customers."""
  isPublished: Boolean!

  """Product name."""
  name: String

  """Product slug."""
  slug: String

  """Product price."""
  basePrice: Decimal

  """Tax rate for enabled tax gateway."""
  taxCode: String

  """Search engine optimization fields."""
  seo: SeoInput

  """Weight of the Product."""
  weight: Int

  """
  Stock keeping unit of a product. Note: this field is only used if a product doesn't use variants.
  """
  sku: String

  """
  The total quantity of a product available for sale. Note: this field is only used if a product doesn't use variants.
  """
  quantity: Int

  """
  Determines if the inventory of this product should be tracked. If false, the quantity won't change when customers buy this item. Note: this field is only used if a product doesn't use variants.
  """
  trackInventory: Boolean

  """Product cost price amount."""
  costPriceAmount: Decimal

  """ID of the type that product belongs to."""
  productType: ID
}

"""Deletes a product."""
type ProductDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  product: Product
}

type ProductError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ProductErrorCode!
}

"""An enumeration."""
enum ProductErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  IO_ERROR
  INVALID
  NOT_PRODUCTS_IMAGE
  NOT_FOUND
  REQUIRED
  UNIQUE
  VARIANT_NO_DIGITAL_CONTENT
  PROPERTY_NOTIN_PRODUCT
  IS_USING
  IMAGES_NOT_MATCH
}

input ProductFilterInput {
  """"""
  isPublished: Boolean
  publicationDate: Date
  collections: [ID]
  categories: [ID]

  """"""
  hasCategory: Boolean
  price: PriceRangeInput

  """"""
  search: String
}

"""Represents a product image."""
type ProductImage implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  sortOrder: Int

  """"""
  alt: String!

  """The URL of the image."""
  url(
    """Size of the image."""
    size: Int
  ): String!
}

"""Deletes product images."""
type ProductImageBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]!
}

"""
Create a product image. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
"""
type ProductImageCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  product: Product
  image: ProductImage
  productErrors: [ProductError!]!
}

input ProductImageCreateInput {
  """Alt text for an image."""
  alt: String

  """Represents an image file in a multipart request."""
  image: Upload!

  """ID of an product."""
  product: ID!
}

"""Deletes a product image."""
type ProductImageDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  product: Product
  image: ProductImage
  productErrors: [ProductError!]!
}

"""Changes ordering of the product image."""
type ProductImageReorder {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  product: Product
  productErrors: [ProductError!]!
}

input ProductInput {
  """Publication date. ISO 8601 standard."""
  publicationDate: Date

  """ID of the product's category."""
  category: ID

  """Determine if taxes are being charged for the product."""
  chargeTaxes: Boolean

  """Product description (HTML/text)."""
  shortDescription: String

  """Product description (HTML/text)."""
  description: String

  """Product description (JSON)."""
  descriptionJson: JSONString

  """Determines if product is visible to customers."""
  isPublished: Boolean!

  """Product name."""
  name: String
  brand: String

  """Product slug."""
  slug: String

  """Product price."""
  basePrice: Decimal

  """Tax rate for enabled tax gateway."""
  taxCode: String

  """Search engine optimization fields."""
  seo: SeoInput

  """Weight of the Product."""
  weight: Int

  """
  Stock keeping unit of a product. Note: this field is only used if a product doesn't use variants.
  """
  sku: String

  """
  The total quantity of a product available for sale. Note: this field is only used if a product doesn't use variants.
  """
  quantity: Int

  """
  Determines if the inventory of this product should be tracked. If false, the quantity won't change when customers buy this item. Note: this field is only used if a product doesn't use variants.
  """
  trackInventory: Boolean

  """Product cost price amount."""
  costPriceAmount: Decimal
  properties: [PropertyInput]
}

input ProductOrder {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """
  Sort product by the selected attribute's values.
  Note: this doesn't take translations into account yet.
  """
  attributeId: ID

  """Sort products by the selected field."""
  field: ProductOrderField
}

enum ProductOrderField {
  """Sort products by name."""
  NAME

  """Sort products by price."""
  PRICE

  """Sort products by update date."""
  DATE

  """Sort products by type."""
  TYPE

  """Sort products by publication status."""
  PUBLISHED
}

"""Represents availability of a product in the storefront."""
type ProductPricingInfo {
  """Whether it is in sale or not."""
  onSale: Boolean

  """The discount amount if in sale (null otherwise)."""
  discount: TaxedMoney

  """The discount amount in the local currency."""
  discountLocalCurrency: TaxedMoney

  """The discounted price range of the product variants."""
  priceRange: TaxedMoneyRange

  """The undiscounted price range of the product variants."""
  priceRangeUndiscounted: TaxedMoneyRange

  """
  The discounted price range of the product variants in the local currency.
  """
  priceRangeLocalCurrency: TaxedMoneyRange
}

"""
Custom attribute of a product. Attributes can be assigned to products and variants at the product type level.
"""
type ProductProperty implements Node {
  """The ID of the object."""
  id: ID!
  product: Product!

  """Name of an property displayed in the interface."""
  name: String!

  """Value of an property displayed in the interface."""
  values: [ProductPropertyValue]
}

input ProductPropertyFilter {
  id: ID

  """"""
  value: String

  """"""
  slug: String
  property: ID

  """"""
  search: String
  ids: [ID]
  inCategory: ID
}

enum ProductPropertySortField {
  """Sort products by Sort properties by name."""
  NAME

  """Sort products by Sort properties by slug."""
  SLUG
}

input ProductPropertySortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort properties by the selected field."""
  field: ProductPropertySortField!
}

"""
Custom attribute of a product. Attributes can be assigned to products and variants at the product type level.
"""
type ProductPropertyValue implements Node {
  """The ID of the object."""
  id: ID!

  """Value of an property displayed in the interface."""
  value: String

  """"""
  property: ProductProperty!
}

type ProductReview implements Node {
  id: ID!
  updated: DateTime!
  rate: Int!
  review: String
  ordered: Boolean
  customer: Customer!
  product: Product!
  attachments: [ProductReviewAttachment!]!
  parentReview: ProductReview
  replies(
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductReviewCountableConnection
}

type ProductReviewAttachment implements Node {
  id: ID!
  created: DateTime!
  type: AttachmentType!
  url: String!
}

input ProductReviewAttachmentInput {
  id: ID
  type: AttachmentType
  content: Upload
}

type ProductReviewCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ProductReviewCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ProductReviewCountableEdge {
  """The item at the end of the edge."""
  node: ProductReview!

  """A cursor for use in pagination."""
  cursor: String!
}

type ProductReviewCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productReview: ProductReview
  productReviewErrors: [ProductReviewError!]!
}

type ProductReviewDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productReview: ProductReview
  productReviewErrors: [ProductReviewError!]!
}

type ProductReviewError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ProductReviewErrorCode!
}

enum ProductReviewErrorCode {
  GRAPHQL_ERROR
  INVALID_CUSTOMER
  INVALID_PRODUCT
  INVALID_RATE
  INVALID_ATTACHMENT
  NOT_FOUND
  NOT_OWN_REVIEW
}

input ProductReviewInput {
  rate: Int!
  review: String
  attachmentInputs: [ProductReviewAttachmentInput!]!
}

type ProductReviewReply {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productReview: ProductReview
  productReviewErrors: [ProductReviewError!]!
}

type ProductReviewUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productReview: ProductReview
  productReviewErrors: [ProductReviewError!]!
}

"""Creates a new product."""
type ProductSync {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  product: Product
}

"""Updates an existing product."""
type ProductUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  product: Product
}

"""Represents a version of a product such as different size or color."""
type ProductVariant implements Node & ObjectWithMetadata {
  """The ID of the object."""
  id: ID!

  """"""
  name: String!
  type: VariantType!
  isFreeShip: Boolean!
  bundleLines: [VariantBundleLine]

  """"""
  sku: String!

  """"""
  product: Product!

  """"""
  trackInventory: Boolean!
  weight: Weight

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """
  Quantity of a product in the store's possession, including the allocated stock that is waiting for shipment.
  """
  quantity: Int! @deprecated(reason: "This field will be removed in Saleor 2.11. Use the stock field instead.")

  """Quantity allocated for orders"""
  quantityAllocated: Int!
  quantityOrdered: Int!

  """
  Override the base price of a product if necessary. A value of `null` indicates that the default product price is used.
  """
  priceOverride: Money!
  priceOriginal: Money!

  """
  Lists the storefront variant's pricing, the current price and discounts, only meant for displaying.
  """
  pricing: VariantPricingInfo

  """Whether the variant is in stock and visible or not."""
  isAvailable: Boolean @deprecated(reason: "This field will be removed in Saleor 2.11. Use the stock field instead.")

  """Variant is active in KV or not."""
  isActive: Boolean

  """Cost price of the variant."""
  costPrice: Money

  """Gross margin percentage value."""
  margin: Int

  """
  Total revenue generated by a variant in given period of time. Note: this field should be queried using `reportProductSales` query as it uses optimizations suitable for such calculations.
  """
  revenue(period: ReportingPeriod): TaxedMoney

  """List of images for the product variant."""
  images: [ProductImage]

  """Stocks for the product variant."""
  stock: [Stock]

  """Value of an property displayed in the interface."""
  variantProperties: [ProductPropertyValue]
  translations: [ProductVariantTranslation]
}

"""Publish product variants."""
type ProductVariantBulkPublish {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Returns how many objects were affected."""
  count: Int!
  productErrors: [ProductError!]!
}

"""Creates a new variant for a product."""
type ProductVariantBundleCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

"""Deletes a product variant."""
type ProductVariantBundleDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

input ProductVariantBundleInput {
  name: String!

  """Cost price of the variant."""
  costPrice: Decimal

  """Special price of the particular variant."""
  priceOverride: Decimal!
  priceOriginal: Decimal!
  isFreeShip: Boolean

  """The total quantity of this variant available for sale."""
  quantity: Int!

  """Weight of the Product Variant."""
  weight: Int

  """List of attributes specific to this variant."""
  lines: [VariantBundleLineInput!]!

  """Status of product variant"""
  isActive: Boolean
  product: ID!
}

"""Updates an existing variant for product."""
type ProductVariantBundleUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

type ProductVariantCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ProductVariantCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ProductVariantCountableEdge {
  """The item at the end of the edge."""
  node: ProductVariant!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new variant for a product."""
type ProductVariantCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

input ProductVariantCreateInput {
  """Cost price of the variant."""
  costPrice: Decimal

  """Special price of the particular variant."""
  priceOverride: Decimal

  """The total quantity of this variant available for sale."""
  quantity: Int

  """
  Determines if the inventory of this variant should be tracked. If false, the quantity won't change when customers buy this item.
  """
  trackInventory: Boolean

  """Weight of the Product Variant."""
  weight: Int

  """Product chinese name"""
  cnName: String

  """Product chinese sku"""
  cnSku: String

  """List of attributes specific to this variant."""
  property: [PropertyValuesInput]!

  """Status of product variant"""
  isActive: Boolean
  metadata: JSONString

  """Product ID of which type is the variant."""
  product: ID!
}

"""Deletes a product variant."""
type ProductVariantDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

input ProductVariantFilterInput {
  ids: [ID]
  isActive: Boolean
  type: VariantType
  search: String
}

input ProductVariantInput {
  """Cost price of the variant."""
  costPrice: Decimal

  """Special price of the particular variant."""
  priceOverride: Decimal!
  priceOriginal: Decimal!
  isFreeShip: Boolean

  """
  Determines if the inventory of this variant should be tracked. If false, the quantity won't change when customers buy this item.
  """
  trackInventory: Boolean

  """Weight of the Product Variant."""
  weight: Int

  """List of attributes specific to this variant."""
  propertyValues: [ID]

  """Status of product variant"""
  isActive: Boolean
  product: ID!
}

enum ProductVariantSortField {
  """Sort service accounts by name."""
  NAME
}

input ProductVariantSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort service accounts by the selected field."""
  field: ProductVariantSortField!
}

type ProductVariantTranslation {
  languageCode: LanguageCodeEnum!
  name: String
}

"""Creates a new variant for a product."""
type ProductVariantTranslationCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  productVariantTranslation: ProductVariantTranslation
  productVariant: ProductVariant
}

"""Deletes a product variant."""
type ProductVariantTranslationDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  productVariant: ProductVariant
  productVariantTranslation: ProductVariantTranslation
}

input ProductVariantTranslationInput {
  name: String!
}

"""Updates an existing variant for product."""
type ProductVariantTranslationUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  productVariant: ProductVariant
  productVariantTranslation: ProductVariantTranslation
}

"""Updates an existing variant for product."""
type ProductVariantUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

"""Create a new Property."""
type PropertyCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  property: ProductProperty
}

"""Delete a new Property."""
type PropertyDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  property: ProductProperty
}

input PropertyFilterInput {
  """"""
  search: String
}

input PropertyInput {
  """Name of the property."""
  name: String
  values: [PropertyValueInput]
}

enum PropertySortField {
  """Sort menus by name."""
  NAME

  """Sort menus by items count."""
  ITEMS_COUNT
}

input PropertySortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort properties by the selected field."""
  field: PropertySortField!
}

"""Update a new Property."""
type PropertyUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  property: ProductProperty
}

"""Creates a value for an attribute."""
type PropertyValueCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  propertyValue: ProductPropertyValue
}

"""Delete a new Property value."""
type PropertyValueDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  propertyValue: ProductPropertyValue
}

input PropertyValueFilterInput {
  """"""
  search: String

  """"""
  propertyId: String
}

input PropertyValueInput {
  """Name of the property."""
  value: String
}

"""Update a property value."""
type PropertyValueUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productErrors: [ProductError!]!
  propertyValue: ProductPropertyValue
}

input PropertyValuesInput {
  """
  The name of an property to resolve. If the passed value is non-existent, it will be created.
  """
  property: String!

  """
  The name of an property value to resolve. If the passed value is non-existent, it will be created.
  """
  propertyValue: String!
}

"""Represents an purchase in the shop."""
type Purchase implements Node & ObjectWithMetadata {
  """The ID of the object."""
  id: ID!
  created: DateTime!
  status: PurchaseStatus!
  matched: Boolean!
  source: PurchaseSource!

  """Total price of shipping."""
  shippingPrice: Money
  cnShippingPrice: Money

  """Total amount of the purchase."""
  total: Money
  cnTotal: Money

  """Total discount of the purchase."""
  discount: Money
  cnDiscount: Money

  """"""
  note: String

  """The creator of the purchase."""
  creator: User
  updater: User

  """"""
  toWarehouse: Warehouse
  otherFees: [PurchaseOtherFee]!

  """List of purchase lines."""
  lines: [PurchaseLine]!

  """List of shipments for the purchase."""
  fulfillments: [PurchaseFulfillment]!

  """List of events associated with the purchase."""
  events: [PurchaseEvent]

  """User-friendly number of an purchase."""
  number: String
  totalQuantity: Int

  """Total quantity of the purchase."""
  quantityFulfilled: Int

  """The sum of line prices not including shipping."""
  subtotal: Money
  totalCost: Money

  """User-friendly purchase status."""
  statusDisplay: String

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!
}

"""Adds note to the purchase."""
type PurchaseAddNote {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Purchase with the note added."""
  purchase: Purchase
  purchaseErrors: [PurchaseError!]!
}

input PurchaseAddNoteInput {
  """Note message."""
  message: String
}

"""Adds note to the purchase."""
type PurchaseAddOtherFee {
  errors: [Error!]!
  purchaseOtherFee: PurchaseOtherFee
  purchaseErrors: [PurchaseError!]!
}

"""Cancels purchases."""
type PurchaseBulkCancel {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Returns how many objects were affected."""
  count: Int!
  purchaseErrors: [PurchaseError!]!
}

"""Cancel an purchase."""
type PurchaseCancel {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Canceled purchase."""
  purchase: Purchase
  purchaseErrors: [PurchaseError!]!
}

type PurchaseCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [PurchaseCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type PurchaseCountableEdge {
  """The item at the end of the edge."""
  node: Purchase!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new draft purchase."""
type PurchaseCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  purchaseErrors: [PurchaseError!]!
  purchase: Purchase
}

type PurchaseError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: PurchaseErrorCode!
}

"""An enumeration."""
enum PurchaseErrorCode {
  CANNOT_CANCEL_FULFILLMENT
  CANNOT_UPDATE_FULFILLMENTLINE
  CANNOT_CREATE_FULFILLMENTLINE
  CANNOT_MARK_ARRIVED_FULFILLMENT
  CANNOT_MARK_COLLECTED
  CANNOT_CANCEL_PURCHASE
  CANNOT_DELETE
  CANNOT_COMPLETE
  CANNOT_ADD_OTHERFEE
  CANNOT_EDIT_OTHERFEE
  CANNOT_REFUND
  CAPTURE_INACTIVE_PAYMENT
  NOT_EDITABLE
  FULFILL_PURCHASE_LINE
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  PURCHASE_NO_SHIPPING_ADDRESS
  REQUIRED
  UNIQUE
  VOID_INACTIVE_PAYMENT
  ZERO_QUANTITY
  QUANTITY_GREATER_THAN_LIMIT
  TRACKING_NUMBER_EXISTS
}

"""History log of the purchase."""
type PurchaseEvent implements Node {
  """The ID of the object."""
  id: ID!

  """Date when event happened at in ISO 8601 format."""
  date: DateTime

  """Purchase event type."""
  type: PurchaseEventType

  """User who performed the action."""
  user: User

  """Content of the event."""
  parameters: String
  purchase: Purchase
}

"""An enumeration."""
enum PurchaseEventType {
  PLACED
  UPDATED
  CANCELED
  FINISH
  LINE_ADDED
  LINE_UPDATED
  LINE_DELETED
  NOTE_ADDED
  FULFILLMENT_CREATED
  FULFILLMENT_UPDATED
  FULFILLMENT_CANCELED
  TRACKING_ADDED
  TRACKING_DELETED
  COLLECTED
  OTHER
}

input PurchaseFilterInput {
  status: [PurchaseStatusFilter]
  created: DateRangeInput
  matched: Boolean
  search: String
}

"""Represents purchase fulfillment."""
type PurchaseFulfillment implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  status: PurchaseFulfillmentStatus!
  matched: Boolean!

  """"""
  created: DateTime!
  creator: User
  updater: User
  purchase: Purchase

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of lines for the fulfillment."""
  lines: [PurchaseFulfillmentLine]

  """List of tracking_numbers for the fulfillment."""
  trackingNumbers: [TrackingNumber]

  """User-friendly fulfillment status."""
  statusDisplay: String
}

"""Updates a fulfillment for an purchase."""
type PurchaseFulfillmentAddTracking {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """Purchase tracking number for which fulfillment was added."""
  purchaseFulfillment: PurchaseFulfillment
  purchaseErrors: [PurchaseError!]!
}

"""Cancels existing fulfillment and optionally restocks items."""
type PurchaseFulfillmentCancel {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """A canceled fulfillment."""
  fulfillment: PurchaseFulfillment
  purchaseErrors: [PurchaseError!]!
}

"""Creates a new fulfillment for an purchase."""
type PurchaseFulfillmentCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """A created fulfillment."""
  fulfillment: PurchaseFulfillment
  purchaseErrors: [PurchaseError!]!
}

"""Updates a fulfillment for an purchase."""
type PurchaseFulfillmentDeleteTracking {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  purchaseErrors: [PurchaseError!]!
  purchaseFulfillment: PurchaseFulfillment
}

input PurchaseFulfillmentInput {
  created: DateTime

  """Fulfillment tracking number."""
  trackingNumbers: [TrackingNumberInput!]!

  """Item line to be fulfilled."""
  lines: [PurchaseFulfillmentLineInput!]!
}

"""Represents line of the fulfillment."""
type PurchaseFulfillmentLine implements Node {
  """The ID of the object."""
  id: ID!
  quantity: Int!
  quantityActual: Int!
  purchaseLine: PurchaseLine
  purchaseFulfillment: PurchaseFulfillment
}

input PurchaseFulfillmentLineInput {
  """The ID of the purchase line."""
  purchaseLineId: ID!

  """The number of line item(s) to be fulfilled."""
  quantity: Int!
}

"""An enumeration."""
enum PurchaseFulfillmentStatus {
  """Fulfilled"""
  FULFILLED
  COLLECTED

  """CANCELED"""
  CANCELED
}

input PurchaseInput {
  """Currency for the purchase."""
  currency: String!

  """Discount amount for the purchase."""
  discountAmount: Decimal!
  totalAmount: Decimal!

  """The date and time when the purchase was created."""
  createdDate: DateTime!

  """Shipping address of the customer."""
  toWarehouse: ID!

  """Shipping price for the purchase."""
  shippingPriceAmount: Decimal

  """A note from a customer. Visible by customers in the purchase summary."""
  note: String
  source: PurchaseSource!

  """Variant line input consisting of variant ID and quantity of products."""
  lines: [PurchaseLineInput!]!
}

"""Represents purchase line of particular purchase."""
type PurchaseLine implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  productName: String!

  """"""
  variantName: String!

  """"""
  cnProductName: String!

  """"""
  cnVariantName: String!

  """"""
  quantity: Int!

  """Price of the single item in the purchase line."""
  unitPrice: Money
  cnUnitPrice: Money
  discountPrice: Money
  cnDiscountPrice: Money
  costPrice: Money
  purchase: Purchase!

  """
  A purchased product variant. Note: this field may be null if the variant has been removed from stock at all.
  """
  variant: ProductVariant!
  fulfillmentLines: [PurchaseFulfillmentLine]

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!
  quantityFulfilled: Int!

  """Price of all items in the purchase line."""
  totalPrice: Money
  cnTotalPrice: Money
}

"""Deletes an purchase line from a draft purchase."""
type PurchaseLineDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """An purchase line that was deleted."""
  purchaseLine: PurchaseLine
  purchaseErrors: [PurchaseError!]!
}

input PurchaseLineInput {
  """Number of variant items purchaseed."""
  quantity: Int!

  """Currency for the purchase."""
  currency: String!

  """the unit price amount for the product variant."""
  unitPriceAmount: Decimal!

  """Product variant ID."""
  variantId: ID!
  cnProductName: String
  cnVariantName: String
  discountPriceAmount: Decimal!
}

"""Updates an purchase line of a draft purchase."""
type PurchaseLineUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  purchaseErrors: [PurchaseError!]!
  purchaseLine: PurchaseLine
}

"""Create purchase lines for a draft purchase."""
type PurchaseLinesCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """List of newly added purchase lines."""
  purchaseLine: PurchaseLine
  purchaseErrors: [PurchaseError!]!
}

type PurchaseOtherFee {
  id: ID!
  name: String!
  price: Money!
  cnPrice: Money!
  note: String
  purchase: Purchase
}

type PurchaseOtherFeeDelete {
  errors: [Error!]!
  purchaseOtherFee: PurchaseOtherFee
  purchaseErrors: [PurchaseError!]!
}

input PurchaseOtherFeeInput {
  """Note message."""
  name: String!
  note: String
  currency: String!
  price: Decimal!
}

type PurchaseOtherFeeUpdate {
  errors: [Error!]!
  purchaseOtherFee: PurchaseOtherFee
  purchaseErrors: [PurchaseError!]!
}

enum PurchaseSortField {
  """Sort purchases by number."""
  NUMBER

  """Sort purchases by creation date."""
  CREATION_DATE

  """Sort purchases by fulfillment status."""
  FULFILLMENT_STATUS

  """Sort purchases by total."""
  TOTAL
}

input PurchaseSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort purchases by the selected field."""
  field: PurchaseSortField!
}

enum PurchaseSource {
  DOMESTIC
  CHINA
}

"""An enumeration."""
enum PurchaseStatus {
  """Placed"""
  PLACED

  """Partially fulfilled"""
  PARTIALLY_FULFILLED

  """Fulfilled"""
  FULFILLED
  FINISH

  """Canceled"""
  CANCELED
}

enum PurchaseStatusFilter {
  PLACED
  PARTIALLY_FULFILLED
  FULFILLED
  FINISH
  CANCELED
}

"""Updates a draft purchase."""
type PurchaseUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  purchaseErrors: [PurchaseError!]!
  purchase: Purchase
}

type Query {
  dashboard: Dashboard!
  metadata(key: String!, value: String!): Metadata
  privateMetadata(key: String!, value: String!): Metadata
  chatMessages(
    """Filtering options for customers."""
    filter: ChatMessageFilterInput

    """Sort customers."""
    sortBy: ChatMessageSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ChatMessageCountableConnection
  chatConversations(
    """Filtering options for customers."""
    filter: ChatConversationFilterInput

    """Sort customers."""
    sortBy: ChatConversationSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ChatConversationCountableConnection

  """Look up an address by ID."""
  customerAddress(
    """ID of an address."""
    id: ID!
  ): CustomerAddress

  """Look up an customer by ID."""
  customer(
    """ID of an customer."""
    id: ID!
  ): Customer

  """List of the shop's customers."""
  customers(
    """Filtering options for customers."""
    filter: CustomerFilterInput

    """Sort customers."""
    sortBy: CustomerSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CustomerCountableConnection

  """Look up a banner by ID."""
  banner(
    """ID of the banner."""
    id: ID!
  ): BannerType
  banners(
    """Filtering banner."""
    filter: BannerFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): BannerTypeCountableConnection

  """Look up a banner image by ID."""
  bannerImage(
    """ID of the banner image."""
    id: ID!
  ): BannerImageType
  bannerImages(
    """Filtering banner image."""
    filter: BannerImageFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): BannerImageTypeCountableConnection

  """List of stock histories."""
  stockHistories(
    filter: StockHistoryFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): StockHistoryCountableConnection
  stockBrokenHistories(
    filter: StockHistoryFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): StockBrokenHistoryCountableConnection
  fulfillment(id: ID!): Fulfillment
  fulfillmentByTrackingNumber(trackingNumber: String!): Fulfillment

  """List of fulfillment to be shipped."""
  fulfillments(
    filter: FulfillmentFilterInput

    """Sort fulfillment."""
    sortBy: FulfillmentSortInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): FulfillmentCountableConnection

  """Look up a conversation_tag by ID."""
  tag(
    """ID of an conversation_tag"""
    id: ID!
  ): Tag

  """List of tags."""
  tags(
    filter: TagFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): TagCountableConnection

  """Look up a default message by ID."""
  defaultMessage(
    """ID of an transfer"""
    id: ID!
  ): DefaultMessage

  """List of default messages."""
  defaultMessages(
    filter: DefaultMessageFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): DefaultMessageCountableConnection

  """One facebook page"""
  facebookPage(
    """ID of page (not facebook id)"""
    id: ID!
  ): FacebookPage

  """List of facebook pages"""
  facebookPages: [FacebookPage]

  """One facebook page"""
  chatConversation(
    """ID of conversation"""
    id: ID!
  ): ChatConversation

  """List of shift"""
  shifts(
    filter: ShiftFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ShiftCountableConnection

  """Shift"""
  shift(
    """ID of shift"""
    id: ID!
  ): Shift

  """Look up a transfer by ID."""
  transferShipper(
    """ID of an transfer"""
    id: ID!
  ): TransferShipper

  """List of transfers."""
  transferShippers(
    filter: TransferShipperFilterInput
    sortBy: TransferShipperSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): TransferShipperCountableConnection

  """Look up an purchase by ID."""
  purchase(
    """ID of an purchase."""
    id: ID!
  ): Purchase

  """List of purchases."""
  purchases(
    """Sort purchases."""
    sortBy: PurchaseSortingInput

    """Filtering options for purchases."""
    filter: PurchaseFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): PurchaseCountableConnection
  warehouseTransferByTrackingNumber(trackingNumber: String!): WarehouseTransfer
  warehouseTransfer(id: ID!): WarehouseTransfer

  """List of purchase collections."""
  warehouseCollects(
    """Sort purchase collections."""
    sortBy: WarehouseCollectSortingInput

    """Filtering options for purchase collections."""
    filter: WarehouseCollectFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): WarehouseCollectCountableConnection
  warehouseCollect(id: ID!): WarehouseCollect
  warehouseCollectByTrackingNumber(trackingNumber: String!): [WarehouseCollect]

  """Look up a warehouse by ID."""
  warehouse(
    """ID of an warehouse"""
    id: ID!
  ): Warehouse

  """Look up a warehouse by ID."""
  warehouseByName(
    """ID of an warehouse"""
    name: String!
  ): Warehouse

  """List of purchase collections."""
  warehouseTransfers(
    """Sort purchase collections."""
    sortBy: WarehouseTransferSortingInput

    """Filtering options for purchase collections."""
    filter: WarehouseTransferFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): WarehouseTransferCountableConnection

  """List of warehouses."""
  warehouses(
    filter: WarehouseFilterInput
    sortBy: WarehouseSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): WarehouseCountableConnection

  """Look up a stock by ID"""
  stock(
    """ID of an warehouse"""
    id: ID!
  ): Stock

  """List of stocks."""
  stocks(
    """Filtering options for stocks."""
    filter: StockFilterInput

    """Sort stocks."""
    sortBy: StockSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): StockCountableConnection

  """List of the shop's categories."""
  categories(
    """Filtering options for categories."""
    filter: CategoryFilterInput

    """Sort categories."""
    sortBy: CategorySortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CategoryCountableConnection

  """Look up a category by ID."""
  category(
    """ID of the category."""
    id: ID!
  ): Category
  shop: Shop!

  """Look up a collection by ID."""
  collection(
    """ID of the collection."""
    id: ID!
  ): Collection

  """List of the shop's collections."""
  collections(
    """Filtering options for collections."""
    filter: CollectionFilterInput

    """Sort collections."""
    sortBy: CollectionSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CollectionCountableConnection

  """Look up a product by ID."""
  product(
    """ID of the product."""
    id: ID!

    """View by staff"""
    dashboard: Boolean
  ): Product

  """List of the shop's products."""
  products(
    """Filtering options for products."""
    filter: ProductFilterInput

    """Sort products."""
    sortBy: ProductOrder

    """
    Filter products by stock availability.DEPRECATED: Will be removed in Saleor 2.11, use the `filter` field instead.
    """
    stockAvailability: StockAvailability

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductCountableConnection

  """Look up a product variant by ID."""
  productVariant(
    """ID of the product variant."""
    id: ID!
  ): ProductVariant

  """List of product variants."""
  productVariants(
    """Filter product variants by given IDs."""
    filter: ProductVariantFilterInput
    sortBy: ProductVariantSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductVariantCountableConnection

  """Look up a payment by ID."""
  payment(
    """ID of the payment."""
    id: ID!
  ): Payment

  """List of fulfillment to be shipped."""
  payments(
    filter: PaymentFilterInput

    """Sort fulfillment."""
    sortBy: PaymentSortInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): PaymentCountableConnection

  """Look up a page by ID or slug."""
  page(
    """ID of the page."""
    id: ID

    """The slug of the page."""
    slug: String
  ): Page

  """List of the shop's pages."""
  pages(
    """Sort pages."""
    sortBy: PageSortingInput

    """Filtering options for pages."""
    filter: PageFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): PageCountableConnection

  """Look up an order by ID."""
  order(
    """ID of an order."""
    id: ID!
  ): Order

  """List of orders."""
  orders(
    """Sort orders."""
    sortBy: OrderSortingInput

    """Filtering options for orders."""
    filter: OrderFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): OrderCountableConnection

  """Look up a voucher by ID."""
  voucher(
    """ID of the voucher."""
    id: ID!
  ): Voucher
  voucherAvailableList(checkoutId: ID!): [VoucherAvailable]

  """List of the shop's vouchers."""
  vouchers(
    """Filtering options for vouchers."""
    filter: VoucherFilterInput

    """Sort voucher."""
    sortBy: VoucherSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): VoucherCountableConnection

  """List of all tax rates available from tax gateway."""
  taxTypes: [TaxType]

  """Look up a checkout by token."""
  checkout(
    """The checkout's token."""
    token: ID!
  ): Checkout

  """List of checkouts."""
  checkouts(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CheckoutCountableConnection

  """Look up a checkout line by ID."""
  checkoutLine(
    """ID of the checkout line."""
    id: ID
  ): CheckoutLine

  """List of checkout lines."""
  checkoutLines(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CheckoutLineCountableConnection

  """List of permission groups."""
  permissionGroups(
    """Filtering options for permission groups."""
    filter: PermissionGroupFilterInput

    """Sort permission groups."""
    sortBy: PermissionGroupSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): GroupCountableConnection

  """Look up permission group by ID."""
  permissionGroup(
    """ID of the group."""
    id: ID!
  ): Group

  """List of the shop's staff users."""
  staffs(
    """Filtering options for staff users."""
    filter: StaffFilterInput

    """Sort staff users."""
    sortBy: StaffSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): StaffCountableConnection

  """List of the service accounts."""
  serviceAccounts(
    """Filtering options for service accounts."""
    filter: ServiceAccountFilterInput

    """Sort service accounts."""
    sortBy: ServiceAccountSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ServiceAccountCountableConnection

  """Look up a service account by ID."""
  serviceAccount(
    """ID of the service account."""
    id: ID!
  ): ServiceAccount

  """Look up a user by ID."""
  staff(
    """ID of the user."""
    id: ID!
  ): Staff
  shippingMethod(id: ID!): ShippingMethod
  homeCollection(id: ID!): HomeCollection
  homeCollections(
    filter: HomeCollectionFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): HomeCollectionCountableConnection
  homeSlide(id: ID!): HomeSlide
  homeSlides(
    filter: HomeSlideFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): HomeSlideCountableConnection
  _entities(representations: [_Any]): [_Entity]
  _service: _Service
}

"""Represents a reduced VAT rate for a particular type of goods."""
type ReducedRate {
  """Reduced VAT rate in percent."""
  rate: Float!

  """A type of goods."""
  rateType: TaxRateType!
}

type RefreshCustomer {
  token: String
  payload: GenericScalar
}

type RefreshStaff {
  token: String
  payload: GenericScalar
}

input ReorderInput {
  """The ID of the item to move."""
  id: ID!

  """The new relative sorting position of the item (from -inf to +inf)."""
  sortOrder: Int
}

enum ReportingPeriod {
  TODAY
  THIS_MONTH
  WEEK
}

type RequestCustomerEmailChange {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """A user instance."""
  customer: Customer
  customerErrors: [CustomerError!]!
}

"""Sends an email with the account password modification link."""
type RequestCustomerPasswordReset {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  customerErrors: [CustomerError!]!
  success: Boolean
}

"""Sends an email with the account password modification link."""
type RequestStaffPasswordReset {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  staffErrors: [StaffError!]!
}

type SendChatMessage {
  errors: [Error!]!
  chatErrors: [ChatError!]!
  chatMessage: ChatMessage
}

input SendChatMessageInput {
  page: ID!
  recipient: String!
  isUserRef: Boolean!
  message: ChatMessageInput!
}

input SeoInput {
  """SEO title."""
  title: String

  """SEO description."""
  description: String
}

"""Represents service account data."""
type ServiceAccount implements Node & ObjectWithMetadata {
  """The ID of the object."""
  id: ID!

  """Name of the service account."""
  name: String

  """The date and time when the service account was created."""
  created: DateTime

  """Determine if service account will be set active or not."""
  isActive: Boolean

  """List of the service's permissions."""
  permissions: [PermissionDisplay]
  groups: [Group]

  """Last 4 characters of the tokens."""
  tokens: [ServiceAccountToken]

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!
}

type ServiceAccountCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ServiceAccountCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ServiceAccountCountableEdge {
  """The item at the end of the edge."""
  node: ServiceAccount!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new service account."""
type ServiceAccountCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """The newly created authentication token."""
  authToken: String
  serviceAccountErrors: [ServiceAccountError!]!
  serviceAccount: ServiceAccount
}

"""Deletes a service account."""
type ServiceAccountDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  serviceAccountErrors: [ServiceAccountError!]!
  serviceAccount: ServiceAccount
}

type ServiceAccountError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: AccountErrorCode!
}

input ServiceAccountFilterInput {
  """"""
  search: String

  """"""
  isActive: Boolean
}

input ServiceAccountInput {
  """Name of the service account."""
  name: String!

  """Determine if this service account should be enabled."""
  isActive: Boolean!
  groups: [ID]
}

enum ServiceAccountSortField {
  """Sort service accounts by name."""
  NAME

  """Sort service accounts by creation date."""
  CREATION_DATE
}

input ServiceAccountSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort service accounts by the selected field."""
  field: ServiceAccountSortField!
}

"""Represents token data."""
type ServiceAccountToken implements Node {
  """Name of the authenticated token."""
  name: String

  """Last 4 characters of the token."""
  authToken: String

  """The ID of the object."""
  id: ID!
}

"""Creates a new token."""
type ServiceAccountTokenCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """The newly created authentication token."""
  authToken: String
  serviceAccountErrors: [ServiceAccountError!]!
  serviceAccountToken: ServiceAccountToken
}

"""Deletes an authentication token assigned to service account."""
type ServiceAccountTokenDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  serviceAccountErrors: [ServiceAccountError!]!
  serviceAccountToken: ServiceAccountToken
}

input ServiceAccountTokenInput {
  """Name of the token."""
  name: String

  """ID of service account."""
  serviceAccount: ID!
}

"""Updates an existing service account."""
type ServiceAccountUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  serviceAccountErrors: [ServiceAccountError!]!
  serviceAccount: ServiceAccount
}

type SetCustomerPassword {
  errors: [Error]!

  """A user instance with new password."""
  customer: Customer

  """List of errors that occurred executing the mutation."""
  customerErrors: [CustomerError!]
}

type SetStaffPassword {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """A user instance with a new password."""
  staff: Staff
  staffErrors: [StaffError!]
}

"""Shift"""
type Shift implements Node {
  """The ID of the object."""
  id: ID!

  """Page name"""
  pageName: String

  """Shift name"""
  shiftName: String

  """Time of shift creation"""
  createdAt: DateTime

  """Date of shift start"""
  dateStart: String

  """Time of shift start"""
  timeStart: String

  """Time of shift end"""
  timeEnd: String

  """Type of shift"""
  shiftType: String
  assignees: [User]

  """Latest assignee in list have conversation"""
  currentAssigneeId: String
}

"""Updates shift."""
type ShiftAssigneeAdd {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  shift: Shift
  chatErrors: [ChatError!]!
}

"""Remove assignee from a shift."""
type ShiftAssigneeRemove {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  shift: Shift
  chatErrors: [ChatError!]!
}

type ShiftCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ShiftCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type ShiftCountableEdge {
  """The item at the end of the edge."""
  node: Shift!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates new shift."""
type ShiftCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  chatErrors: [ChatError!]!
  shift: Shift
}

input ShiftFilterInput {
  """"""
  search: String
}

input ShiftInput {
  """Shift name"""
  shiftName: String

  """Date of shift start"""
  dateStart: String

  """Type of shift"""
  shiftType: String
}

"""Update shift."""
type ShiftUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  chatErrors: [ChatError!]!
  shift: Shift
}

input ShiftUpdateInput {
  """Time of shift start"""
  timeStart: String

  """Time of shift end"""
  timeEnd: String
}

type ShippingError {
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ShippingErrorCode!
}

enum ShippingErrorCode {
  GRAPHQL_ERROR
  ALREADY_EXIST
  INVALID_WEIGHT
  INVALID_AMOUNT
  NOT_FOUND
  UNIQUE
}

type ShippingMethod {
  id: ID!
  name: String!
  type: ShippingMethodType!
  price: Money!
  minimumOrderPriceAmount: Decimal
  maximumOrderPriceAmount: Decimal
  minimumOrderWeight: Float
  maximumOrderWeight: Float
  shippingZone: ShippingZone!
}

type ShippingMethodCreate {
  shippingMethod: ShippingMethod
  errors: [Error!]!
  shippingErrors: [ShippingError!]!
}

type ShippingMethodDelete {
  shippingMethod: ShippingMethod
  errors: [Error!]!
  shippingErrors: [ShippingError!]!
}

input ShippingMethodInput {
  name: String!
  type: ShippingMethodType!
  price: Decimal!
  currency: String!
  minimumOrderPriceAmount: Decimal
  maximumOrderPriceAmount: Decimal
  minimumOrderWeight: Float
  maximumOrderWeight: Float
  shippingZone: ID!
}

enum ShippingMethodType {
  FREE_SHIP
  PRICE_BASED
  WEIGHT_BASED
}

type ShippingMethodUpdate {
  shippingMethod: ShippingMethod
  errors: [Error!]!
  shippingErrors: [ShippingError!]!
}

"""Added by nicholas"""
enum ShippingStatus {
  READY_TO_PICK
  PICKING
  CANCEL
  PICKED
  DELIVERING
  DELIVERED
  DELIVERY_FAIL
  WAITING_TO_RETURN
  RETURNING
  RETURNED
  EXCEPTION
  RESTOCKED
}

type ShippingZone {
  id: ID!
  name: String!
  countries: CountryDisplay!
  isDefault: Boolean!
}

type Shop {
  homeSlides: [HomeSlide!]!
  homeCollections: [Collection!]!
}

type ShopError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ShopErrorCode!
}

"""An enumeration."""
enum ShopErrorCode {
  ALREADY_EXISTS
  CANNOT_FETCH_TAX_RATES
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

"""Represents customer social detail data."""
type SocialDetail implements Node {
  """"""
  socialType: String!

  """"""
  socialId: String!

  """"""
  socialAppId: String!

  """"""
  socialAppName: String!

  """"""
  socialName: String!

  """The ID of the object."""
  id: ID!
}

type Staff implements Node & ObjectWithMetadata {
  id: ID!

  """"""
  name: String!

  """"""
  isActive: Boolean!
  type: AccountType

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of user's permissions."""
  permissions: [PermissionDisplay]
  groups: [Group]

  """"""
  lastLogin: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean!

  """"""
  email: String!
  avatar(
    """Size of the avatar."""
    size: Int
  ): Image
}

"""Deletes a user avatar. Only for staff members."""
type StaffAvatarDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """An updated user instance."""
  staff: Staff
  staffErrors: [StaffError!]!
}

"""
Create a user avatar. Only for staff members. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
"""
type StaffAvatarUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """An updated user instance."""
  staff: Staff
  staffErrors: [StaffError!]!
}

type StaffCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [StaffCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type StaffCountableEdge {
  """The item at the end of the edge."""
  node: Staff!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new staff user."""
type StaffCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  staffErrors: [StaffError!]!
  staff: Staff
}

type StaffError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: AccountErrorCode!
}

input StaffFilterInput {
  status: StaffStatus

  """"""
  search: String
}

input StaffInput {
  """Given name."""
  name: String!

  """The unique email address of the user."""
  email: String!

  """User account is active."""
  isActive: Boolean!
  isSuperuser: Boolean!

  """List of permission code names to assign to this user."""
  groups: [ID]
}

type StaffPasswordChange {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """A user instance with a new password."""
  staff: Staff
  staffErrors: [StaffError!]
}

enum StaffSortField {
  """Sort users by name."""
  NAME

  """Sort users by email."""
  EMAIL
}

input StaffSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort users by the selected field."""
  field: StaffSortField!
}

enum StaffStatus {
  ACTIVE
  DEACTIVATED
}

"""Updates an existing staff user."""
type StaffUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  staffErrors: [StaffError!]!
  staff: Staff
}

"""Represents stock."""
type Stock implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  warehouse: Warehouse!

  """"""
  productVariant: ProductVariant!

  """
  Quantity of a product in the warehouse's possession, including the allocated stock that is waiting for shipment.
  """
  quantity: Int!
  quantityBroken: Int!
  quantityPurchased: Int!

  """Quantity purchased for orders"""
  quantityToCollect: Int!

  """Quantity of a product available for sale."""
  stockQuantity: Int!
  histories(before: String, after: String, first: Int, last: Int): StockHistoryCountableConnection
  brokenHistories(before: String, after: String, first: Int, last: Int): StockBrokenHistoryCountableConnection
}

enum StockAvailability {
  IN_STOCK
  OUT_OF_STOCK
}

"""Variant in/out histories."""
type StockBrokenHistory implements Node {
  """The ID of the object."""
  id: ID!

  """Method in/out"""
  method: String!

  """"""
  createdAt: DateTime!

  """User name"""
  partner: String!

  """Cost price of the variant."""
  costPriceAmount: Decimal

  """Cost price currency of the variant."""
  costCurrency: String

  """Quantity of a product in warehouse."""
  lastStocks: Int!

  """The ID of the variant to save history."""
  stock: Stock

  """Stock history note."""
  note: String

  """Lading code"""
  ladingCode: String

  """Quantity of a product in/out of warehouse."""
  inOutQuantity: Int!
}

type StockBrokenHistoryCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [StockHistoryBrokenCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type StockCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [StockCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type StockCountableEdge {
  """The item at the end of the edge."""
  node: Stock!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates new stock."""
type StockCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  stockErrors: [StockError!]!
  stock: Stock
}

type StockError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: StockErrorCode!
}

"""An enumeration."""
enum StockErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  CANNOT_EDIT_STOCK
}

input StockFilterInput {
  quantity: IntRangeInput
  stockQuantity: IntRangeInput

  """"""
  search: String
}

"""Variant in/out histories."""
type StockHistory implements Node {
  """The ID of the object."""
  id: ID!

  """Method in/out"""
  method: String!

  """"""
  createdAt: DateTime!

  """User name"""
  partner: String!

  """Cost price of the variant."""
  costPriceAmount: Decimal

  """Cost price currency of the variant."""
  costCurrency: String

  """Quantity of a product in warehouse."""
  lastStocks: Int!

  """The ID of the variant to save history."""
  stock: Stock

  """Stock history note."""
  note: String

  """Lading code"""
  ladingCode: String

  """Quantity of a product in/out of warehouse."""
  inOutQuantity: Int!
}

type StockHistoryBrokenCountableEdge {
  """The item at the end of the edge."""
  node: StockBrokenHistory!

  """A cursor for use in pagination."""
  cursor: String!
}

type StockHistoryCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [StockHistoryCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type StockHistoryCountableEdge {
  """The item at the end of the edge."""
  node: StockHistory!

  """A cursor for use in pagination."""
  cursor: String!
}

input StockHistoryFilterInput {
  """"""
  search: String
  stockId: ID
  warehouseId: ID
}

input StockInput {
  """Product variant associated with stock."""
  productVariant: ID!

  """Warehouse in which stock is located."""
  warehouse: ID!

  """Quantity of items available for sell."""
  quantity: Int!
  quantityBroken: Int!
  note: String
}

"""Update given stock line."""
type StockLineUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  stockErrors: [StockError!]!
  stock: Stock
}

input StockLineUpdateInput {
  """Quantity of items available for sell."""
  quantity: Int!
  quantityBroken: Int

  """Stock note."""
  note: String
}

enum StockSortField {
  """Sort stocks by id."""
  ID

  """Sort stocks by product name."""
  PRODUCT_NAME

  """Sort stocks by quantity."""
  QUANTITY

  """Sort stocks by stock quantity."""
  STOCK_QUANTITY
}

input StockSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort stocks by the selected field."""
  field: StockSortField!
}

type StockUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  stockErrors: [StockError!]!
  stock: Stock
}

type Subscription {
  chatMessages(conversationId: ID!): ChatMessage
  chatConversations(appId: ID!): ChatConversation
  chatPages: FacebookPage
}

type SyncChatMessage {
  errors: [Error!]!
  chatErrors: [ChatError!]!
  chatMessage: ChatMessage
}

input SyncChatMessageInput {
  messageFacebookId: String
  createdAt: DateTime!
  sender: String!
  recipient: String!
  isUserRef: Boolean!
  staffName: String
  type: ChatMessagingType!
  adId: String
  content: String!
}

"""Represents tag."""
type Tag implements Node {
  """The ID of the object."""
  id: ID!

  """Name of conversation_tag."""
  name: String!
  color: String
}

type TagCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [TagCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type TagCountableEdge {
  """The item at the end of the edge."""
  node: Tag!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates new conversation_tag."""
type TagCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  chatErrors: [ChatError!]!
  tag: Tag
}

"""Deletes selected conversation_tag."""
type TagDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  chatErrors: [ChatError!]!
  tag: Tag
}

input TagFilterInput {
  """"""
  search: String
}

input TagInput {
  """Name of conversation_tag."""
  name: String!
  color: String
}

"""Updates conversation_tag."""
type TagUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  chatErrors: [ChatError!]!
  tag: Tag
}

"""An enumeration."""
enum TaxRateType {
  ACCOMMODATION
  ADMISSION_TO_CULTURAL_EVENTS
  ADMISSION_TO_ENTERTAINMENT_EVENTS
  ADMISSION_TO_SPORTING_EVENTS
  ADVERTISING
  AGRICULTURAL_SUPPLIES
  BABY_FOODSTUFFS
  BIKES
  BOOKS
  CHILDRENS_CLOTHING
  DOMESTIC_FUEL
  DOMESTIC_SERVICES
  E_BOOKS
  FOODSTUFFS
  HOTELS
  MEDICAL
  NEWSPAPERS
  PASSENGER_TRANSPORT
  PHARMACEUTICALS
  PROPERTY_RENOVATIONS
  RESTAURANTS
  SOCIAL_HOUSING
  STANDARD
  WATER
  WINE
}

"""Representation of tax types fetched from tax gateway."""
type TaxType {
  """Description of the tax type."""
  description: String

  """External tax code used to identify given tax group."""
  taxCode: String
}

"""
Represents a monetary value with taxes. In cases where taxes were not applied, net and gross values will be equal.
"""
type TaxedMoney {
  """Currency code."""
  currency: String!

  """Amount of money including taxes."""
  gross: Money!

  """Amount of money without taxes."""
  net: Money!

  """Amount of taxes."""
  tax: Money!
}

"""Represents a range of monetary values."""
type TaxedMoneyRange {
  """Lower bound of a price range."""
  start: TaxedMoney

  """Upper bound of a price range."""
  stop: TaxedMoney
}

type TopVariant {
  productVariant: ProductVariant!
  quantity: Int!
}

type TrackingNumber {
  id: ID!
  trackingNumber: String!
  shippingCompany: String
}

input TrackingNumberInput {
  """Fulfillment tracking number."""
  trackingNumber: String!
  shippingCompany: String!
}

"""An object representing a single payment."""
type Transaction implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  created: DateTime!

  """"""
  payment: Payment!

  """"""
  kind: TransactionKind!

  """"""
  isSuccess: Boolean!

  """Total amount of the transaction."""
  amount: Money
}

"""An enumeration."""
enum TransactionError {
  """incorrect_number"""
  TRANSACTIONERROR_INCORRECT_NUMBER

  """invalid_number"""
  TRANSACTIONERROR_INVALID_NUMBER

  """incorrect_cvv"""
  TRANSACTIONERROR_INCORRECT_CVV

  """invalid_cvv"""
  TRANSACTIONERROR_INVALID_CVV

  """incorrect_zip"""
  TRANSACTIONERROR_INCORRECT_ZIP

  """incorrect_address"""
  TRANSACTIONERROR_INCORRECT_ADDRESS

  """invalid_expiry_date"""
  TRANSACTIONERROR_INVALID_EXPIRY_DATE

  """expired"""
  TRANSACTIONERROR_EXPIRED

  """processing_error"""
  TRANSACTIONERROR_PROCESSING_ERROR

  """declined"""
  TRANSACTIONERROR_DECLINED
}

"""An enumeration."""
enum TransactionKind {
  """Authorization"""
  AUTH

  """Refund"""
  REFUND

  """Capture"""
  CAPTURE

  """Void"""
  VOID

  """Confirm"""
  CONFIRM
}

"""Represents transfer."""
type TransferShipper implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  name: String!

  """"""
  contact: String

  """"""
  phone: String

  """"""
  note: String
}

type TransferShipperCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [TransferShipperCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type TransferShipperCountableEdge {
  """The item at the end of the edge."""
  node: TransferShipper!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates new transfer."""
type TransferShipperCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  warehouseErrors: [WarehouseError!]!
  transferShipper: TransferShipper
}

"""Deletes selected transfer."""
type TransferShipperDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  warehouseErrors: [WarehouseError!]!
  transferShipper: TransferShipper
}

input TransferShipperFilterInput {
  """"""
  search: String
}

input TransferShipperInput {
  """"""
  name: String!

  """"""
  contact: String

  """"""
  phone: String

  """"""
  note: String
}

enum TransferShipperSortField {
  """Sort transfers by name."""
  NAME
}

input TransferShipperSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort transfers by the selected field."""
  field: TransferShipperSortField!
}

"""Updates given transfer."""
type TransferShipperUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  warehouseErrors: [WarehouseError!]!
  transferShipper: TransferShipper
}

type TypePropertyCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [TypePropertyCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type TypePropertyCountableEdge {
  """The item at the end of the edge."""
  node: ProductProperty!

  """A cursor for use in pagination."""
  cursor: String!
}

type TypePropertyValueCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [TypePropertyValueCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type TypePropertyValueCountableEdge {
  """The item at the end of the edge."""
  node: ProductPropertyValue!

  """A cursor for use in pagination."""
  cursor: String!
}

"""An object scalar"""
scalar UUID

"""Updates metadata of an object."""
type UpdateMetadata {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  metadataErrors: [MetadataError!]!
  item: MetadataItem
}

"""Updates private metadata of an object."""
type UpdatePrivateMetadata {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  metadataErrors: [MetadataError!]!
  item: MetadataItem
}

"""A custom scalar that represents files"""
scalar Upload

"""Represents user data."""
type User implements Node & ObjectWithMetadata {
  """The ID of the object."""
  id: ID!

  """"""
  name: String!

  """"""
  isActive: Boolean!
  type: AccountType

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem]!

  """List of public metadata items. Can be accessed without permissions."""
  metadata: [MetadataItem]!

  """List of user's permissions."""
  permissions: [PermissionDisplay]
  groups: [Group]
}

"""Represents a VAT rate for a country."""
type VAT {
  """Country code."""
  countryCode: String!

  """Standard VAT rate in percent."""
  standardRate: Float

  """Country's VAT rate exceptions for specific types of goods."""
  reducedRates: [ReducedRate]!
}

type VariantBundleLine {
  id: ID!
  variant: ProductVariant!
  quantity: Int!
}

input VariantBundleLineInput {
  variantId: ID!
  quantity: Int!
}

"""Assign an image to a product variant."""
type VariantImageAssign {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productVariant: ProductVariant
  image: ProductImage
  productErrors: [ProductError!]!
}

"""Unassign an image from a product variant."""
type VariantImageUnassign {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  productVariant: ProductVariant
  image: ProductImage
  productErrors: [ProductError!]!
}

"""Represents availability of a variant in the storefront."""
type VariantPricingInfo {
  """Whether it is in sale or not."""
  onSale: Boolean

  """The discount amount if in sale (null otherwise)."""
  discount: TaxedMoney

  """The discount amount in the local currency."""
  discountLocalCurrency: TaxedMoney

  """The price, with any discount subtracted."""
  price: TaxedMoney

  """The price without any discount."""
  priceUndiscounted: TaxedMoney

  """The discounted price in the local currency."""
  priceLocalCurrency: TaxedMoney
}

enum VariantType {
  NORMAL
  BUNDLE
}

type VerifyPhoneCode {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  customerErrors: [CustomerError!]!
  matched: Boolean
}

type VerifyTokenCustomer {
  payload: GenericScalar
  customer: Customer
}

"""Mutation that confirms if token is valid and also returns user data."""
type VerifyTokenStaff {
  payload: GenericScalar
  staff: Staff
}

"""
Vouchers allow giving discounts to particular customers on categories, collections or specific products. They can be used during checkout by providing valid voucher codes.
"""
type Voucher implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  name: String

  """Determines a type of voucher."""
  type: VoucherTypeEnum!

  """"""
  code: String!

  """"""
  usageLimit: Int

  """"""
  used: Int!

  """"""
  startDate: DateTime!

  """"""
  endDate: DateTime

  """"""
  applyOncePerOrder: Boolean!

  """"""
  applyOncePerCustomer: Boolean!

  """Determines a type of discount for voucher - value or percentage"""
  discountValueType: DiscountValueTypeEnum!

  """"""
  discountValue: Float!
  minSpent: Money

  """"""
  minCheckoutItemsQuantity: Int

  """List of categories this voucher applies to."""
  categories(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CategoryCountableConnection

  """List of collections this voucher applies to."""
  collections(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): CollectionCountableConnection

  """List of products this voucher applies to."""
  products(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductCountableConnection

  """List of products this voucher applies to."""
  productVariants(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """Return the first n elements from the list."""
    first: Int

    """Return the last n elements from the list."""
    last: Int
  ): ProductVariantCountableConnection

  """List of countries available for the shipping voucher."""
  countries: [CountryDisplay]
}

type VoucherAvailable {
  voucher: Voucher!
  discountAmount: Decimal!
}

"""Deletes vouchers."""
type VoucherBulkDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  discountErrors: [DiscountError!]!

  """Returns how many objects were affected."""
  count: Int!
}

type VoucherCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [VoucherCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type VoucherCountableEdge {
  """The item at the end of the edge."""
  node: Voucher!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates a new voucher."""
type VoucherCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  discountErrors: [DiscountError!]!
  voucher: Voucher
}

"""Deletes a voucher."""
type VoucherDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  discountErrors: [DiscountError!]!
  voucher: Voucher
}

enum VoucherDiscountType {
  FIXED
  PERCENTAGE
  SHIPPING
}

input VoucherFilterInput {
  status: [VoucherStatus]
  timesUsed: IntRangeInput
  discountType: [VoucherDiscountType]
  started: DateTimeRangeInput

  """"""
  search: String
}

input VoucherInput {
  """Voucher type: PRODUCT, CATEGORY SHIPPING or ENTIRE_ORDER."""
  type: VoucherTypeEnum!

  """Voucher name."""
  name: String!
  code: String!

  """Start date of the voucher in ISO 8601 format."""
  startDate: DateTime

  """End date of the voucher in ISO 8601 format."""
  endDate: DateTime

  """Choices: fixed or percentage."""
  discountValueType: DiscountValueTypeEnum!

  """Value of the voucher."""
  discountValue: Decimal!

  """Products discounted by the voucher."""
  productVariants: [ID]

  """Products discounted by the voucher."""
  products: [ID]

  """Collections discounted by the voucher."""
  collections: [ID]

  """Categories discounted by the voucher."""
  categories: [ID]

  """Min purchase amount required to apply the voucher."""
  minAmountSpent: Decimal

  """Minimal quantity of checkout items required to apply the voucher."""
  minCheckoutItemsQuantity: Int

  """Country codes that can be used with the shipping voucher."""
  countries: [String]

  """Voucher should be applied to the cheapest item or entire order."""
  applyOncePerOrder: Boolean!

  """Voucher should be applied once per customer."""
  applyOncePerCustomer: Boolean!

  """Limit number of times this voucher can be used in total."""
  usageLimit: Int
}

enum VoucherSortField {
  """Sort vouchers by code."""
  CODE

  """Sort vouchers by start date."""
  START_DATE

  """Sort vouchers by end date."""
  END_DATE

  """Sort vouchers by value."""
  VALUE

  """Sort vouchers by type."""
  TYPE

  """Sort vouchers by usage limit."""
  USAGE_LIMIT

  """Sort vouchers by minimum spent amount."""
  MINIMUM_SPENT_AMOUNT
}

input VoucherSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort vouchers by the selected field."""
  field: VoucherSortField!
}

enum VoucherStatus {
  ACTIVE
  EXPIRED
  SCHEDULED
}

enum VoucherTypeEnum {
  SHIPPING
  ENTIRE_ORDER
  SPECIFIC_PRODUCT
}

"""Updates a voucher."""
type VoucherUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  discountErrors: [DiscountError!]!
  voucher: Voucher
}

"""Represents warehouse."""
type Warehouse implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  name: String!

  """"""
  slug: String!
  canShip: Boolean!
  contact: String
  phone: String
  streetAddress1: String
  streetAddress2: String
  ward: String
  cityArea: String
  city: String
  countryArea: String
  country: String
}

"""Represents user address data."""
type WarehouseAddress implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  name: String!

  """"""
  companyName: String!

  """"""
  streetAddress1: String!

  """"""
  streetAddress2: String!

  """"""
  city: String!

  """"""
  cityArea: String!

  """"""
  postalCode: String!

  """Shop's default country."""
  country: CountryDisplay!

  """"""
  countryArea: String!
  phone: String
}

type WarehouseCollect implements Node {
  """The ID of the object."""
  id: ID!
  created: DateTime!
  status: WarehouseCollectStatus!
  type: WarehouseCollectType!
  productVariant: ProductVariant!
  warehouse: Warehouse!
  quantityPlan: Int!

  """"""
  quantityGood: Int!

  """"""
  quantityMissing: Int!

  """"""
  quantityBroken: Int!

  """"""
  quantityWrong: Int!

  """"""
  collected: DateTime
  trackingNumbers: [TrackingNumber!]!
  images: [Image]
  note: String
  collector: Staff
  purchaseFulfillment: PurchaseFulfillment
  transfer: WarehouseTransfer
  fulfillment: Fulfillment
}

type WarehouseCollectCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [WarehouseCollectCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type WarehouseCollectCountableEdge {
  """The item at the end of the edge."""
  node: WarehouseCollect!

  """A cursor for use in pagination."""
  cursor: String!
}

input WarehouseCollectFilterInput {
  created: DateRangeInput
  collected: DateRangeInput
  type: WarehouseCollectType
  status: WarehouseCollectStatus

  """"""
  search: String
}

input WarehouseCollectInput {
  """"""
  quantityGood: Int!

  """"""
  quantityMissing: Int!

  """"""
  quantityBroken: Int!

  """"""
  quantityWrong: Int!
  note: String
  images: [ImageInput]
}

enum WarehouseCollectSortField {
  CREATED
  COLLECTED
}

input WarehouseCollectSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort purchase_addresses by the selected field."""
  field: WarehouseCollectSortField!
}

enum WarehouseCollectStatus {
  UNCOLLECTED
  COLLECTED
  FINISHED
}

enum WarehouseCollectType {
  PURCHASE
  TRANSFER
  RESTOCK
}

type WarehouseCollectUpdate {
  warehouseCollect: WarehouseCollect
  errors: [Error!]!
  warehouseErrors: [WarehouseError!]!
}

type WarehouseCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [WarehouseCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type WarehouseCountableEdge {
  """The item at the end of the edge."""
  node: Warehouse!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Creates new warehouse."""
type WarehouseCreate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  warehouseErrors: [WarehouseError!]!
  warehouse: Warehouse
}

"""Deletes selected warehouse."""
type WarehouseDelete {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  warehouseErrors: [WarehouseError!]!
  warehouse: Warehouse
}

type WarehouseError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: WarehouseErrorCode!
}

"""An enumeration."""
enum WarehouseErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  IS_USING
  ALREADY_COLLECTED
  QUANTITY_GREATER_THAN_LIMIT
}

input WarehouseFilterInput {
  """"""
  search: String
}

input WarehouseInput {
  """Warehouse slug."""
  slug: String!

  """Warehouse name."""
  name: String!
  canShip: Boolean!
  contact: String
  phone: String
  streetAddress1: String
  streetAddress2: String
  ward: String
  city: String
  cityArea: String
  country: String
  countryArea: String
}

"""Add shipping zone to given warehouse."""
type WarehouseShippingZoneAssign {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  warehouse: Warehouse
  warehouseErrors: [WarehouseError!]!
}

"""Remove shipping zone from given warehouse."""
type WarehouseShippingZoneUnassign {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  warehouse: Warehouse
  warehouseErrors: [WarehouseError!]!
}

enum WarehouseSortField {
  """Sort warehouses by name."""
  NAME
}

input WarehouseSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort warehouses by the selected field."""
  field: WarehouseSortField!
}

type WarehouseTransfer implements Node {
  """The ID of the object."""
  id: ID!
  created: DateTime!
  shipper: TransferShipper!
  creator: Staff!
  from: Warehouse
  to: Warehouse
  note: String
  status: WarehouseTransferStatus
  lines: [WarehouseTransferLine!]!
  finished: DateTime
  trackingNumber: String!
  weight: Weight!
  shippingCost: Decimal!
  currency: String!
  matched: Boolean!
}

type WarehouseTransferCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [WarehouseTransferCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type WarehouseTransferCountableEdge {
  """The item at the end of the edge."""
  node: WarehouseTransfer!

  """A cursor for use in pagination."""
  cursor: String!
}

type WarehouseTransferCreate {
  warehouseTransfer: WarehouseTransfer
  errors: [Error!]!
  warehouseErrors: [WarehouseError!]!
}

type WarehouseTransferDelete {
  warehouseTransfer: WarehouseTransfer
  errors: [Error!]!
  warehouseErrors: [WarehouseError!]!
}

input WarehouseTransferFilterInput {
  """"""
  search: String
  to: ID
  from: ID
  trackingNumber: String
}

input WarehouseTransferInput {
  from: ID!
  to: ID!
  shipper: ID!
  note: String
  lines: [WarehouseTransferLineInput!]!
  trackingNumber: String!
  weight: Int!
  shippingCost: Decimal!
  currency: String!
}

type WarehouseTransferLine implements Node {
  """The ID of the object."""
  id: ID!
  productVariant: ProductVariant!
  goodQuantity: Int!
  brokenQuantity: Int!
  actualQuantity: Int!
}

input WarehouseTransferLineInput {
  productVariant: ID!
  goodQuantity: Int!
  brokenQuantity: Int!
}

enum WarehouseTransferSortField {
  CREATED
}

input WarehouseTransferSortingInput {
  """Specifies the direction in which to sort products."""
  direction: OrderDirection!

  """Sort warehouses by the selected field."""
  field: WarehouseTransferSortField!
}

enum WarehouseTransferStatus {
  UNCOLLECTED
  COLLECTED
  FINISHED
}

type WarehouseTransferUpdate {
  warehouseTransfer: WarehouseTransfer
  errors: [Error!]!
  warehouseErrors: [WarehouseError!]!
}

"""Updates given warehouse."""
type WarehouseUpdate {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!
  warehouseErrors: [WarehouseError!]!
  warehouse: Warehouse
}

"""Represents weight value in a specific weight unit."""
type Weight {
  """Weight unit."""
  unit: String!

  """Weight value."""
  value: Float!
}

"""An enumeration."""
enum WeightUnitsEnum {
  KG
  LB
  OZ
  G
}

"""Wishlist item."""
type Wishlist implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  createdAt: DateTime!

  """"""
  items(before: String, after: String, first: Int, last: Int, id: ID): WishlistItemCountableConnection!
}

"""Add product to the current user's wishlist."""
type WishlistAddProductMutation {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """The wishlist of the current user."""
  wishlist: [WishlistItem]
  wishlistErrors: [WishlistError!]!
}

"""Add product variant to the current user's wishlist."""
type WishlistAddProductVariantMutation {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """The wishlist of the current user."""
  wishlist: [WishlistItem]
  wishlistErrors: [WishlistError!]!
}

type WishlistError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: WishlistErrorCode!
}

"""An enumeration."""
enum WishlistErrorCode {
  GRAPHQL_ERROR
  INVALID
  USER_INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

"""Wishlist item."""
type WishlistItem implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  wishlist: Wishlist!

  """"""
  product: Product!

  """"""
  variants: [ProductVariant]
}

type WishlistItemCountableConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [WishlistItemCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
}

type WishlistItemCountableEdge {
  """The item at the end of the edge."""
  node: WishlistItem!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Remove product from the current user's wishlist."""
type WishlistRemoveProductMutation {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """The wishlist of the current user."""
  wishlist: [WishlistItem]
  wishlistErrors: [WishlistError!]!
}

"""Remove product variant from the current user's wishlist."""
type WishlistRemoveProductVariantMutation {
  """List of errors that occurred executing the mutation."""
  errors: [Error!]!

  """The wishlist of the current user."""
  wishlist: [WishlistItem]
  wishlistErrors: [WishlistError!]!
}

"""An object scalar"""
scalar _Any

union _Entity = WarehouseAddress | CheckoutAddress | ServiceAccount | Staff | Group | ProductVariant | Product | Collection | Category | ProductImage | OrderAddress | CustomerAddress | SocialDetail | Customer

scalar _FieldSet

type _Service {
  sdl: String!
}
